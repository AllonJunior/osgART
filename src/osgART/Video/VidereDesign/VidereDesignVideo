/*  --------------------------------------------------------------------------
*   Copyright (C) 2004 Hitlab NZ.
*   The distribution policy is describe on the Copyright.txt furnish 
*    with this library.
*   -------------------------------------------------------------------------*/
/**
*  \file  VidereDesignVideo
*  \brief A Video class for VidereDesign DCAM camera.
*
* 
* A wrapper of the VidereDesign DCAM API:
* http://www.videredesign.com/products.htm
*	
*   \remark 
*
*   History :
*
*  \author Raphael Grasset Raphael.Grasset@hitlabnz.org
*  \version 3.1
*  \date 01/12/07
**/
/*  --------------------------------------------------------------------------
*   History : 
*   Rev		Date		Who		Changes
*
*----------------------------------------------------------------------------*/

#if defined VidereDesignVideo_CYCLE

#error Header cyclic inclusion detected in Video.h
#else // defined VidereDesignVideo_CYCLE
#define VidereDesignVideo_CYCLE

#if !defined VidereDesignVideo_h
#define VidereDesignVideo_h

/* --------------------------------------------------------------------------
* include file
*----------------------------------------------------------------------------*/

//standard include

#include <iostream>
#include <string>

//graphics include
#include <osgART/Export>
#include <OpenThreads/Mutex>

//personnal include
#include <osgART/GenericVideo>
#include "dcam.h"

namespace osgART {

/** --------------------------------------------------------------------------
* class Video.
*----------------------------------------------------------------------------*/

class OSGART_EXPORT VidereDesignVideo: public GenericVideo
{
public:        
// Standard Services
    
    /** 
    * \brief default constructor.
    * The default constructor.
    * @param id the number of the dcam camera in the bus
    */
    VidereDesignVideo(int id,PixelFormatType pft=VIDEOFORMAT_RGB24,int _xsize=640,int _ysize=480,FrameRateType=VIDEOFRAMERATE_30);
    
    /** 
    * \brief copy constructor.
    *
    // VidereDesignVideo(const VidereDesignVideo &);
    
    /** 
    * \brief destructor.
    *
    */
    ~VidereDesignVideo();   
    
    /** 
    * \brief affectation operator.
    *
    */
    VidereDesignVideo& operator=(const VidereDesignVideo &);
    
// Interface
    
    // information interface
    void SelfDisplay(std::ostream& stream) const;

    bool OK(void) const;

    // mutator

    // services
    
    /**
    * \brief open the Video stream.
    * Access the Video stream (hardware or file) and get an handle on it.
    */
	void open();
	
	/**
    * \brief close the Video stream.
    * Terminate the connection with the Video stream and clean handle.
    */
	void close();
	
	/**
    * \brief start the Video stream grabbing.
    * Start to get image from the Video stream. In function of the implementation on different
    * platform, this function can run a thread, signal or real-time function. 
    */
	void start();
	
	/**
    * \brief stop the Video stream grabbing.
    * Stop to get image from the Video stream. In function of the implementation on different
    * platform, this function can stop a thread, signal or real-time function. 
    */
	void stop();
	
	/**
    * \brief update the Video stream grabbing.
    * Try to get an image of the Video instance, usable by your application.
    */
	void update();
	
// Public Type
    
// Public Datas
    
    
protected: 
    
//Protected Services

//Protected Type

//Protected Data
	
private:

//Private Services


//Private Type

//Private Data

	int g_Id;
	dSystem* g_System;
	dCamera* g_Camera;
	dISIZE g_Size;
	dISPEED g_Speed;
	dITYPE g_Type;
	int timeOut;
};


/* --------------------------------------------------------------------------
* inline fonction
*----------------------------------------------------------------------------*/

inline std::ostream& operator <<(std::ostream& stream, const VidereDesignVideo& object_display);

std::ostream& operator <<(std::ostream& stream, const VidereDesignVideo& object_display)
{
    object_display.SelfDisplay(stream);
    return stream;
}

}
/*----------------------------------------------------------------------------*/

#endif // !defined VidereDesignVideo_h

#undef VidereDesignVideo_CYCLE
#endif // else defined VidereDesignVideo_CYCLE