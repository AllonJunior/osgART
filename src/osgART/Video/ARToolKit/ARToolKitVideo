/*
 *	osgART/Video/ARToolKit/ARToolKitVideo
 *	osgART: AR ToolKit for OpenSceneGraph
 *
 *	Copyright (c) 2005-2007 ARToolworks, Inc. All rights reserved.
 *	
 *	Rev		Date		Who		Changes
 *  1.0   	2006-12-08  ---     Version 1.0 release.
 *
 */
// @@OSGART_LICENSE_HEADER_BEGIN@@
// @@OSGART_LICENSE_HEADER_END@@

/**
 *  \file  Video
 *  \brief A video class for video input stream.
 *
 * 
 * A multiplatform video class mainly based on the ARToolKit Video Class
 * wrapped to be used with OpenScenegraph.
 *	
 *   \remark 
 *
 *   History :
 *
 *  \author Julian Looser Julian.Looser@hitlabnz.org
 *  \author Raphael Grasset Raphael.Grasset@hitlabnz.org
 *  \author Hartmut Seichter hartmut.seichter@hitlabnz.org
 *  \version 3.1
 *  \date 01/12/07
 **/

#ifndef OSGART_ARTOOLKITVIDEO
#define OSGART_ARTOOLKITVIDEO

/* --------------------------------------------------------------------------
 * include file
 *----------------------------------------------------------------------------*/

//standard include

#include <iostream>
#include <string>

//graphics include
#include <AR/video.h>
#include "osgART/Export"

//personnal include
#include "osgART/GenericVideo"
#include "osgART/VideoConfig"


namespace osgART {

	class ARToolKitVideo : public osgART::GenericVideo
	{
	public:        
	// Standard Services
		
		/** 
			* Default constructor. It creates a video source from a configuration string
			* as it is been used in the original AR Toolkit 2.71
			* \param videoName a string definition of the video background. See documentation
			* of ARToolKit for further details.
			*/
		ARToolKitVideo();
		
		/** 
			* Copy constructor.
			*
			*/
		ARToolKitVideo(const ARToolKitVideo &, 
			const osg::CopyOp& copyop = osg::CopyOp::SHALLOW_COPY);
		
		/** 
			* Destructor.
			*
			*/
		~ARToolKitVideo();   
		
		
			
        virtual osg::Object* cloneType() const 
        { 
			return new ARToolKitVideo(); 
		}
        
        virtual osg::Object* clone(const osg::CopyOp& copyop) const 
        { 
			return new ARToolKitVideo(*this,copyop); 
		}
			
        virtual bool isSameKindAs(const osg::Object* obj) const 
        {
			return dynamic_cast<const ARToolKitVideo*>(obj) != 0; 
		}
        
        virtual const char* libraryName() const 
        {
			return "osgART"; 
		}
        
        virtual const char* className() const 
        {
			return "ARToolKitVideo";
		}
		
		/** 
		* Affectation operator.
		*
		*/
		ARToolKitVideo& operator = (const ARToolKitVideo &);
		
		/**
			* Open the video stream. Access the video stream (hardware or file) and get an handle on it.
			*/
		void open();
		
		/**
			* Close the video stream. Terminates the connection with the video stream and clean handle.
			*/
		void close(bool = true);
		
		/**
			* Start the video stream grabbing. Start to get image from the video stream. In function of the 
			* implementation on different platform, this function can run a thread, signal or 
			* real-time function.
			*/
		void start();
		
		/**
			* Stop the video stream grabbing. Stop to get image from the video stream. In function 
			* of the implementation on different platform, this function can stop a thread, signal or 
			* real-time function. 
			*/
		void stop();
		
		/**
			* Update the video stream grabbing. Try to get an image of the video instance, usable 
			* by your application.
			*/
		void update();
		

		/** 
		* Deallocate image memory. Deallocates any internal memory allocated by the instance of this
		* class.
		*/		 
		void releaseImage();
		
		virtual osgART::VideoConfiguration* getVideoConfiguration();
		
		
	private:

		AR2VideoParamT *video;
		
		osgART::VideoConfiguration m_config;
		
		GLint _internalformat_GL; 
		GLenum _format_GL;
		GLenum _datatype_GL;
		
		
		int getGLPixelFormatForARPixelFormat(const int arPixelFormat, GLint *internalformat_GL, GLenum *format_GL, GLenum *type_GL);
		
	};
}

#endif
