/*  --------------------------------------------------------------------------
*   Copyright (C) 2004 Hitlab NZ.
*   The distribution policy is describe on the Copyright.txt furnish 
*    with this library.
*   -------------------------------------------------------------------------*/
/**
*  \file  Video
*  \brief A video class for video input stream.
*
* 
* A multiplatform video class mainly based on the ARToolKit Video Class
* wrapped to be used with OpenScenegraph.
*	
*   \remark 
*
*   History :
*
*  \author Julian Looser Julian.Looser@hitlabnz.org
*  \author Raphael Grasset Raphael.Grasset@hitlabnz.org
*  \version 3.1
*  \date 01/12/07
**/
/*  --------------------------------------------------------------------------
*   History : 
*   Rev		Date		Who		Changes
*
*----------------------------------------------------------------------------*/

#ifndef OSGART_ARTOOLKITVIDEO
#define OSGART_ARTOOLKITVIDEO

/* --------------------------------------------------------------------------
* include file
*----------------------------------------------------------------------------*/

//standard include

#include <iostream>
#include <string>

//graphics include
#include <AR/video.h>
#include "osgART/Export"

//personnal include
#include "osgART/GenericVideo"


class ARToolKitVideo : public osgART::GenericVideo
{
public:        
// Standard Services
	
	/** 
		* Default constructor. It creates a video source from a configuration string
		* as it is been used in the original AR Toolkit 2.71
		* \param videoName a string definition of the video background. See documentation
		* of ARToolKit for further details.
		*/
	ARToolKitVideo(const char *videoName);
	
	/** 
		* Copy constructor.
		*
		*/
	ARToolKitVideo(const ARToolKitVideo &);
	
	/** 
		* Destructor.
		*
		*/
	~ARToolKitVideo();   
	
	/** 
		* Affectation operator.
		*
		*/
	ARToolKitVideo& operator = (const ARToolKitVideo &);
	
	/**
		* Open the video stream. Access the video stream (hardware or file) and get an handle on it.
		*/
	void open();
	
	/**
		* Close the video stream. Terminates the connection with the video stream and clean handle.
		*/
	void close();
	
	/**
		* Start the video stream grabbing. Start to get image from the video stream. In function of the 
		* implementation on different platform, this function can run a thread, signal or 
		* real-time function.
		*/
	void start();
	
	/**
		* Stop the video stream grabbing. Stop to get image from the video stream. In function 
		* of the implementation on different platform, this function can stop a thread, signal or 
		* real-time function. 
		*/
	void stop();
	
	/**
		* Update the video stream grabbing. Try to get an image of the video instance, usable 
		* by your application.
		*/
	void update();
	

	/** 
		* Deallocate image memory. Deallocates any internal memory allocated by the instance of this
		* class.
		*/		 
		void releaseImage();
	
private:

	AR2VideoParamT *video;
	std::string videoName;
};


#endif
