/*  --------------------------------------------------------------------------
*   Copyright (C) 2004 Hitlab NZ.
*   The distribution policy is describe on the Copyright.txt furnish 
*    with this library.
*   -------------------------------------------------------------------------*/
/**
*  \file  IntranelStreamVideo
*  \brief A IntranelStreamVideo class for intranel RTPSP.
*
* 
* support for Intranel RTSP under direct show.
* the code is based on Hartmut Seichter one for DirectShow input.
*	
*   \remark 
*
*   History :
*
*  \author Hartmut Seichter Hartmut.Seichter@hitlabnz.org
*  \author Raphael Grasset Raphael.Grasset@hitlabnz.org
*  \version 3.1
*  \date 01/12/07
**/
/*  --------------------------------------------------------------------------
*   History : 
*   Rev		Date		Who		Changes
*
*----------------------------------------------------------------------------*/

#ifndef OSGART_INTRANELSTREAMVIDEO
#define OSGART_INTRANELSTREAMVIDEO

/* --------------------------------------------------------------------------
* include file
*----------------------------------------------------------------------------*/

//standard include

#include <iostream>
#include <string>

//graphics include
#include <osgART/Export>
#include <OpenThreads/Mutex>

//personnal include
#include <osgART/GenericVideo>

#define WIN32_LEAN_AND_MEAN
#include <streams.h>


/** --------------------------------------------------------------------------
* class IntranelStreamVideo.
*----------------------------------------------------------------------------*/

struct tpVideoFrame;
	
class IntranelStreamVideo: public osgART::GenericVideo
{
public:        
// Standard Services
    
    /** 
	* \brief default constructor.
	* The default constructor.
	*/
    IntranelStreamVideo();
    
    /** 
    * \brief copy constructor.
    *
    */
    IntranelStreamVideo(const IntranelStreamVideo &);
    

    
    /** 
    * \brief affectation operator.
    *
    */
    IntranelStreamVideo& operator=(const IntranelStreamVideo &);
    
// Interface

    // mutator
    
    // services
    
    /**
    * \brief open the IntranelStreamVideo stream.
    * Access the IntranelStreamVideo stream (hardware or file) and get an handle on it.
    */
	void open();
	
	/**
    * \brief close the IntranelStreamVideo stream.
    * Terminate the connection with the IntranelStreamVideo stream and clean handle.
    */
	void close();
	
	/**
    * \brief start the IntranelStreamVideo stream grabbing.
    * Start to get image from the IntranelStreamVideo stream. In function of the implementation on different
    * platform, this function can run a thread, signal or real-time function. 
    */
	void start();
	
	/**
    * \brief stop the IntranelStreamVideo stream grabbing.
    * Stop to get image from the IntranelStreamVideo stream. In function of the implementation on different
    * platform, this function can stop a thread, signal or real-time function. 
    */
	void stop();
	
	/**
    * \brief update the IntranelStreamVideo stream grabbing.
    * Try to get an image of the IntranelStreamVideo instance, usable by your application.
    */
	void update();
	
	inline virtual void releaseImage() {};
	
	void CheckIn();
	void CheckOut();

	const int& IsUpdated() const; 

	void DisplayProperties(IPin *pIn);
	void DisplayFilter(IBaseFilter *);
	
	bool managed;
	
protected:

//Protected Services

//Protected Type

//Protected Data
		int updated;
private:

//Private Services

//Private Type


//Private Data

	tpVideoFrame* m_frame;
	
	HRESULT CaptureVideo(IBaseFilter *pRenderer);
	HRESULT FindCaptureDevice(IBaseFilter **ppSrcFilter);

	HRESULT GetPin(IBaseFilter *pFilter, PIN_DIRECTION PinDir,const char* name, IPin **ppPin);
	HRESULT GetMediaType(IPin *pin, AM_MEDIA_TYPE *mt);

	CComPtr<ICaptureGraphBuilder2>	m_pCapture;

	CComPtr<IBaseFilter>			m_pFSrc;		// Source Filter
	CComPtr<IGraphBuilder>			m_pGB;
	CComPtr<IBaseFilter>			m_pRenderer;	// Texture Renderer Filter
    
    CComPtr<IPin>					m_pFSrcPinOut;	// Source Filter Output Pin   
	CComPtr<IMediaControl>			m_pMC;
    CComPtr<IMediaEvent>			m_pME;			// Media Event
    
    protected:
    
    /** 
	* \brief destructor.
	*
    */
    virtual ~IntranelStreamVideo();   


};

#endif