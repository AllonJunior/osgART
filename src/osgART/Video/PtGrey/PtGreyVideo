/*  --------------------------------------------------------------------------
*   Copyright (C) 2004 Hitlab NZ.
*   The distribution policy is describe on the Copyright.txt furnish 
*    with this library.
*   -------------------------------------------------------------------------*/
/**
*  \file  PtGreyVideo
*  \brief A Video class for PtGrey Camera input.
*
* A Video class support Point Grey Research cameras. 
* Based on the PGR Fly Capture SDK.
*	
*   \remark this class have been tested with Firefly, DragonFly, Flea cameras.
*
*   History :
*
*  \author Julian Looser Julian.Looser@hitlabnz.org
*  \author Raphael Grasset Raphael.Grasset@hitlabnz.org
*  \version 3.1
*  \date 01/12/07
**/
/*  --------------------------------------------------------------------------
*   History : 
*   Rev		Date		Who		Changes
*   1.1     06/05/30    RG		Add the ROI mode
*----------------------------------------------------------------------------*/

#ifndef OSGART_PTGREYVIDEO
#define OSGART_PTGREYVIDEO

/* --------------------------------------------------------------------------
* include file
*----------------------------------------------------------------------------*/

//standard include
#include <iostream>
#include <string>

//graphics include
#include <PGRFlyCapture.h>
#include <osgART/Export>
#include <OpenThreads/Mutex>

//personnal include
#include <osgART/GenericVideo>
#include <osgART/VideoConfig>

/** --------------------------------------------------------------------------
* class PtGreyVideo.
*----------------------------------------------------------------------------*/

class PtGreyVideo: public osgART::GenericVideo
{
public:        
// Standard Services
    
    /** 
    * \brief default constructor.
    */
    PtGreyVideo(int id_cam,osgART::PixelFormatType pft=osgART::VIDEOFORMAT_RGB24,int _xsize=640,int _ysize=480,osgART::FrameRateType frame_rate=osgART::VIDEOFRAMERATE_30);

    /** 
    * \brief copy constructor.
    *
    // PtGreyVideo(const PtGreyVideo &);
    
 
    
    /** 
    * \brief affectation operator.
    *
    */
    PtGreyVideo& operator=(const PtGreyVideo &);
    
// Interface

    // mutator

    // services
    
    /**
    * \brief open the Video stream.
    * Access the Video stream (hardware or file) and get an handle on it.
    */
	void open();
	
	/**
    * \brief close the Video stream.
    * Terminate the connection with the Video stream and clean handle.
    */
	void close();
	
	/**
    * \brief start the Video stream grabbing.
    * Start to get image from the Video stream. In function of the implementation on different
    * platform, this function can run a thread, signal or real-time function. 
    */
	void start();
	
	/**
    * \brief stop the Video stream grabbing.
    * Stop to get image from the Video stream. In function of the implementation on different
    * platform, this function can stop a thread, signal or real-time function. 
    */
	void stop();
	
	/**
    * \brief update the Video stream grabbing.
    * Try to get an image of the Video instance, usable by your application.
    */
	void update();

	inline virtual void releaseImage() {};

	/**
	* \brief get information from the camera.
	*
	*/
	void getInfo();
	
	/** 
	* \brief enable a FORMAT_7 ROI capture mode.
	* activat this function before the start of a program. the roi can't be changed
	* after the start function
	* @param _roi if true enable, false disable.
	*/
	void setROI(bool _roi) {isRoi=_roi;};
	
	/** 
	* \brief setup the ROI area.
	* activate this function before the start of a program. the roi area can't be changed
	* after the start function. By default the camera get a RAW8 format type.
	* @param _xstart
	
	*/
	void setROIParameters(int _xstart,int _ystart,int _xend, int _yend);
	
	bool IsRunning() {return isRunning;};
	
	unsigned char** getRefImage() {return &newImage;};
	
	bool haveNewImage;
    
protected:


    /** 
    * \brief destructor.
    *
    */
    virtual ~PtGreyVideo();   
    
//Protected Services

//Protected Type

//Protected Data
	
private:

//Private Services


//Private Type

//Private Data
	FlyCaptureContext context;
	FlyCaptureVideoMode videoMode;	FlyCaptureFrameRate videoSpeed;
	int camIndex;
	bool isRunning;
	bool isRoi;
	int xstart,ystart,xend,yend;
	unsigned char* newImage;
	OpenThreads::Mutex internalMutex;
};

#endif