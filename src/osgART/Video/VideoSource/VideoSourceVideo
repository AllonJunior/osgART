/*  --------------------------------------------------------------------------
*   Copyright (C) 2004 Hitlab NZ.
*   The distribution policy is describe on the Copyright.txt furnish 
*    with this library.
*   -------------------------------------------------------------------------*/
/**
*  \file  VideoSourceVideo
*  \brief A Video class for VideoSource input.
*
* 
* A wrapper of the VideoSource library:
* 
*	
*   \remark 
*
*   History :
*
*  \author Raphael Grasset Raphael.Grasset@hitlabnz.org
*  \version 3.1
*  \date 06/09/19
**/
/*  --------------------------------------------------------------------------
*   History : 
*   Rev		Date		Who		Changes
*
*----------------------------------------------------------------------------*/

#ifndef OSGART_VIDEOSOURCEVIDEO
#define OSGART_VIDEOSOURCEVIDEO

/* --------------------------------------------------------------------------
* include file
*----------------------------------------------------------------------------*/

//standard include

#include <iostream>
#include <string>

//graphics include
#include <osgART/Export>
#include <OpenThreads/Mutex>

//personnal include
#include <osgART/GenericVideo>
#include "VideoSource.h"


/** --------------------------------------------------------------------------
* class VideoSourceVideo.
*----------------------------------------------------------------------------*/

class VideoSourceVideo: public osgART::GenericVideo
{
public:        
// Standard Services
    
    /** 
    * \brief default constructor.
    * The default constructor.
    * @param VideoName a string definition of the Video background. See documentation
    * of ARToolKit for further details.
    */
    VideoSourceVideo(const char* videoName);

    /** 
    * \brief copy constructor.
    *
    // VideoSourceVideo(const VideoSourceVideo &);
    
    /** 
    * \brief destructor.
    *
    */
    ~VideoSourceVideo();   
    
    /** 
    * \brief affectation operator.
    *
    */
    VideoSourceVideo& operator=(const VideoSourceVideo &);
    
// Interface
   
    // mutator

    // services
    
    /**
    * \brief open the Video stream.
    * Access the Video stream (hardware or file) and get an handle on it.
    */
	void open();
	
	/**
    * \brief close the Video stream.
    * Terminate the connection with the Video stream and clean handle.
    */
	void close();
	
	/**
    * \brief start the Video stream grabbing.
    * Start to get image from the Video stream. In function of the implementation on different
    * platform, this function can run a thread, signal or real-time function. 
    */
	void start();
	
	/**
    * \brief stop the Video stream grabbing.
    * Stop to get image from the Video stream. In function of the implementation on different
    * platform, this function can stop a thread, signal or real-time function. 
    */
	void stop();
	
	/**
    * \brief update the Video stream grabbing.
    * Try to get an image of the Video instance, usable by your application.
    */
	void update();
	
	inline virtual void releaseImage() {};
	
// Public Type
    
// Public Datas
    
    
protected: 
    
//Protected Services

//Protected Type

//Protected Data
	
private:

//Private Services


//Private Type

//Private Data
	 VideoSource *vs;
	 IniParser* iniParser;
};

#endif