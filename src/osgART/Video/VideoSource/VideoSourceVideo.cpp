///////////////////////////////////////////////////////////////////////////////
// File name : VideoSourceVideo.C
//
// Creation : YYY
//
// Version : YYY
//
// Author : Raphael Grasset
//
// email : Raphael.Grasset@imag.fr
//
// Purpose : ??
//
// Distribution :
//
// Use :
//	??
//
// Todo :
//	O add more video formats
// 
//	/
//	X
//
// History :
//	YYY : Mr Grasset : Creation of the file
///////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////////
// include file
///////////////////////////////////////////////////////////////////////////////

#include "VideoSourceVideo"
#include <OpenThreads/Thread>

#include <iniparser.h>

using namespace std;
using namespace osgART;

///////////////////////////////////////////////////////////////////////////////
// Macro 
///////////////////////////////////////////////////////////////////////////////

#if defined(NO_DEBUG)
#define ASSERT(x)
#else //defined(NO_DEBUG)
#define ASSERT(x) if(!(x)) \
    { cerr << "Assertion failed : (" << #x << ')' << endl \
    << "In file : " << __FILE__ << "at line #" << __LINE__ << endl \
    << "Compiled the " << __DATE__ << " at " << __TIME__ << endl; abort();}
#endif // else defined(NO_DEBUG)

const char* const Video_RCS_ID = "@(#)class Video definition.";

///////////////////////////////////////////////////////////////////////////////
// class Video
///////////////////////////////////////////////////////////////////////////////


///////////////////////////////////////////////////////////////////////////////
// Static variable
///////////////////////////////////////////////////////////////////////////////


///////////////////////////////////////////////////////////////////////////////
// PUBLIC: Standard services 
///////////////////////////////////////////////////////////////////////////////

VideoSourceVideo::VideoSourceVideo(const char* config_file)
{

	pixelsize=3;
	pixelformat=VIDEOFORMAT_RGB24;
		
}

/*
VideoSourceVideo::VideoSourceVideo(const VideoSourceVideo &)
{
    
}*/

VideoSourceVideo::~VideoSourceVideo(void)
{
    
}

VideoSourceVideo& 
VideoSourceVideo::operator=(const VideoSourceVideo &)
{
    return *this;
}

///////////////////////////////////////////////////////////////////////////////
// PUBLIC : Interface 
///////////////////////////////////////////////////////////////////////////////

void
VideoSourceVideo::open()
{
 vs = VideoSourceFactory::instance()->construct();
 if (vs==0)
 {
	 std::cerr<<"ERROR:this is not working :-("<<std::endl;
 }
 else
 vs->initialize();
}

void
VideoSourceVideo::close()
{

}

void
VideoSourceVideo::start()
{
  vs->start();
}

void
VideoSourceVideo::stop()
{
	vs->stop();
}

void
VideoSourceVideo::update()
{
	IplImage *ipl_image;
	OpenThreads::ScopedLock<OpenThreads::Mutex> _lock(m_mutex);

	vs->getFrame(ipl_image);
	if (ipl_image!=NULL)
	{
		image=(unsigned char*)ipl_image->imageData;
	}
	else
	{
		image=NULL;
	}
}



///////////////////////////////////////////////////////////////////////////////
// PROTECTED : Services
///////////////////////////////////////////////////////////////////////////////


///////////////////////////////////////////////////////////////////////////////
// PRIVATE : Services
///////////////////////////////////////////////////////////////////////////////
