/*
 * osgART / AR Toolkit for OpenSceneGraph
 * (C) 2004-2006 HIT Lab NZ, University of Canterbury
 *
 * Licensing is governed by the LICENSE.txt which is 
 * part of this library distribution.
 *
 */

#ifndef OSGART_CL_VIDEO_RECORD
#define OSGART_CL_VIDEO_RECORD

/**
 * \file  ARToolKitTrackerProfiler
 * \author Yannick Allusse Yannick.Allusse@hitlabnz.org
 */

#include "osgART/Export"
#include <osg/vec3>
#include <osg/quat>
#include <osg/matrix>
#include <osgText/text>
#include <osg/LineSegment>
#include <osgProducer/Viewer>
#include <osg/MatrixTransform>
#include "CvCamParam"
#include "PosRecord"
#include "FrameRecord"

#include <string>
#include <SG_TLS_xml_container.h>
#include <SG_TRC_appli.h>
#include <SG_TRC_timer.h>

#include "ARTracerVal"


#define YCK_BENCH_IR_TRAKER		0	//!< To use IR VRPN trackers
#if YCK_BENCH_IR_TRAKER
			#include <osgVRPN/TrackerBase.h>
			#include <osgVRPN/Tracker.h>
			#include <osgVRPN/AnalogTracker.h>
			#include <osgVRPN/TrackerTransform.h>
			#include <osgVRPN/TrackerManipulator.h>
#endif


//MAX VALUES for tracker TWEAKING...
#define _VIDEO_BENCH_TTWK_POS_ESTIM_MAX	2
#define _VIDEO_BENCH_TTWK_UNDISTORT_MODE_MAX	2
//==================================

namespace osgART {
	

//-------------------------------------

//-------------------------------------
/*!\class CL_VideoBench
*\brief This class is used to create and process benchmark of ARToolki tlike libraries.
*\author Yannick ALLUSSE
*/
class OSGART_EXPORT  CL_VideoBench :
	public CL_XML_BASE_OBJ<std::string>
{
public:
	enum VideoBenchMode
	{
		Idle,
		RecordingVideo,
		BenchMarking		
	};
	
	/*\fn CL_VideoBench(std::string _Name)
	*\brief Default constructor.
	*\param _Name => Name of the benchmark
	*/
		CL_VideoBench(std::string _Name);

	/*\fn ~CL_VideoBench()
	*\brief Default destructor.
	*/
		~CL_VideoBench();
	
	/*\fn int GetMode()
	*\return The current benchmarking mode.
	*\sa VideoBenchMode.
	*/
inline		int GetMode();

	/*\fn int GetMode()
	*\bief Set the current benchmarking mode.
	*\param mode => new benchmarking mode.
	*\sa VideoBenchMode.
	*/
inline		void SetMode(int mode);

	/*\fn CL_FrameRecordGrp *	AddNewFrameGrp()
	*\brief Create a new frame group(CL_FrameRecordGrp*), add it into FrameGrpMngr manager, and set it as CurrentFrameGrp.
	*\return The new CL_FrameRecordGrp*.
	*/
		CL_FrameRecordGrp *	AddNewFrameGrp();

	/*\fn CL_FrameRecordGrp *	SetFrameGrp(int GrpID)
	*\brief Look into the frame group manager for the corresponding frame group and set it as active(CurrentFrameGrp).
	*\return The CurrentFrameGrp.
	*/	
		CL_FrameRecordGrp *	SetFrameGrp(int GrpID);

	/*\fn CL_FrameRecordGrp *	GetNextFrameGrp()
	*\brief Return the next frame group from the FrameGrpMngr manager using CurrentFrameGrpID. Select the first frame of the group as Currentframe.
	*\return The next CL_FrameRecordGrp*, or NULL if not found.
	*/
		CL_FrameRecordGrp *	GetNextFrameGrp();

	/*\fn CL_FrameRecordGrp *	GetPreviousFrameGrp()
	*\brief Return the previous frame group from the FrameGrpMngr manager using CurrentFrameGrpID. Select the first frame of the group as Currentframe.
	*\return The next CL_FrameRecordGrp*, or NULL if not found.
	*/
		CL_FrameRecordGrp *	GetPreviousFrameGrp();

	/*\fn CL_FrameRecord *	AddNewFrame()
	*\brief Create a new frame(CL_FrameRecord*), add it into the CurrentFrameGrp manager, and set it as CurrentFrame.
	*\return The new CL_FrameRecord*.
	*/
		CL_FrameRecord *	AddNewFrame();

	/*\fn CL_FrameRecord *	GetNextFrame()
	*\brief Return the next frame from the CurrentFrameGrp manager using CurrentFrameID. Try to select the next frame group if the current group is finished of empty.
	*\return The next CL_FrameRecord*, or NULL if not found.
	*/
		CL_FrameRecord *	GetNextFrame();

	/*\fn CL_FrameRecord *	GetPreviousFrame()
	*\brief Return the previous frame from the CurrentFrameGrp manager using CurrentFrameID. Try to select the previous frame group if the current group is finished of empty.
	*\return The next CL_FrameRecord*, or NULL if not found.
	*/
		CL_FrameRecord *	GetPreviousFrame();

	/*\fn CL_FrameRecord *	SetFrame(int GrpID)
	*\brief Look into the current frame group manager for the corresponding frame and set it as active(CurrentFrame).
	*\return The CurrentFrame.
	*/
		CL_FrameRecord *	SetFrame(int GrpID);

	/*\fn CL_FrameRecord * GetFirstFrameRecord()
	*\brief Look for the first frame from the first frame group.
	*\note Do not change the CurrentFrameGrp and CurrentFrame values.
	*/
		CL_FrameRecord * GetFirstFrameRecord();


	/*\param video => Current video object containing the frame to process.
	*/
		void SetVideo(osg::ref_ptr<osgART::GenericVideo> video);
		
	/*\return The current video object used in VideoBench
	*/
		osg::ref_ptr<osgART::GenericVideo> GetCurrentVideo();
		
	/*
	*\brief Initialize both video stream and video from file objects. 
	*\return The current video object.
	*/
		osg::ref_ptr<osgART::GenericVideo> InitVideo(std::string _VideoConf);

	CL_XML_MNGR<CL_FrameRecordGrp , unsigned int>	FrameGrpMngr;	//!< XML manager to manage groups of frames.
	CL_XML_CONTAINER								HeaderMngr;		//!< XML container for the headers of the benchmark.
	osg::ref_ptr<osgART::GenericVideo>				m_videoStreaming;	//!< Reference pointer to the video streaming object.
	osg::ref_ptr<osgART::GenericVideo>				m_videoFile;		//!< Reference pointer to the dummyImage Video object.
	osg::ref_ptr<osgART::GenericVideo>				m_video;		//!< Reference pointer to the actual main video object.
	
	

	/*\fn void SetWorkingPath(std::string _Path)
	*\brief Set the default path, used to load the screenshots.
	*/
		void SetWorkingPath(const  std::string _Path);

	/*\fn std::string GetWorkingPath()
	*\brief Return the default path, used to load the screenshots.
	*/
		const std::string & GetWorkingPath() const ;

	/*\fn void StartTimer()
	*\brief Reset the internal timer used to reference all the frames.
	*/
		void StartTimer();

	/*\fn bool InitIRSpace()
	*\brief Init all the tracker object needed for the benchmark.
	*/
		bool InitIRSpace();

#if YCK_BENCH_IR_TRAKER
	/*\fn osg::Matrix CalibrateSquarePattern(int CalibrationNbr)
	*\brief Ask the user to calibrate a square area using IR trackers. 
	The user must use the flystick and point the four corner of the square 'CalibrationNbr' times. On each corner the user must press the first first button of the flystick.
	*\note The more CalibrationNbr is high, more the calibration will be precise.
	*\note The calibration must be done with the maximum precision to have good results.
	*\param CalibrationNbr => Number of records needed to calibrate the square area.
	*\return the Matrix of the square center point.
	*/
		osg::Matrix CalibrateSquarePattern(int CalibrationNbr);
#endif
	std::string  ConsoleInit(std::string &_XMLFileName, bool CreateBench);

	/*\fn bool preUpdate(void)
	*\brief Prepare the benchmark framework to perform the new frame. 
	*\param video => Current video object containing the frame to process.
	*\return true if successfull.
	*/
		bool preUpdate(void);
	
	/*\fn bool postUpdate(void)
	*\brief Post process the frame and record the benchmark data. 
	*\return true if successfull.
	*/
		bool postUpdate(void);

	/*\fn void updateTracker(osg::ref_ptr<osgART::GenericTracker> tracker)
	*\brief When in benchmarking mode, the frame to process is a screenshot and not a video, so we need to do a special update of the tracker so it process the right frame.
	*\param tracker => tracker to update, it must unherit from osgART::ARToolKitTrackerProfiler to be profile.
	*/
		void updateTracker(osg::ref_ptr<osgART::GenericTracker> tracker);
		

	/*
	* \brief Return the CL_OpenCVCamParam object used for the camera calibration.
	*/
		CL_OpenCVCamParam * GetOpenCVParam()const;
		
		
	//================================
	// access values for all the tracker at the same time...
	//================================
	template <typename ValType>
		void SetTrackersValue(std::string ValName, ValType _val);
	void SetTrackerThreshold(int _val);
	
	void PrintAllTrakersOptions();

	#if _SG_TLS_XML
public:
	/*\fn TiXmlElement* XMLLoad(TiXmlElement* _XML_ROOT)
	*\brief Load the benchmark XML data from the given XML stream.
	*\param _XML_ROOT => XML input stream to read the data from.
	*\return the XML element corresponding to this class.
	*\sa SGE::CL_XML_OBJ::XMLLoadFromFile()
	*/
		virtual TiXmlElement* XMLLoad(TiXmlElement* _XML_ROOT);

	/*\fn TiXmlElement* XMLSave(TiXmlElement* _XML_ROOT)
	*\brief Save the benchmark XML data to the given XML stream.
	*\param _XML_ROOT => XML input stream to save the data to.
	*\return the XML element corresponding to this class.
	*\sa SGE::CL_XML_OBJ::XMLSaveToFile()
	*/
		virtual TiXmlElement* XMLSave(TiXmlElement* _XML_ROOT);
#endif

	//====================================
	//	Visualisation part 
	//====================================
	/*	enum VIDEO_BENCH_VIEW_TYPE{
			VIEW_EXP,			//show the experience details
			VIEW_LIB_STATS,		//view lib stats like, conf, pos and time of markers
			VIEW_NONE			//show nothing
		};
	*/
		osg::Group* CreateViewerObjs();
	/*	osg::Group* ReleaseViewerObjs();
		SGE::CL_TEMPLATE_MANAGER<osgText::Text, std::string> TextManager;
		*/
		osg::Group* CreateCurrentFrameNode();
		void		ClearCurrentFrameNode();
		osg::Group* CreateVideoBenchNode(const std::string _name);
		void		Update();
protected:
		osg::Group	*CurrentFrameNode;
		osg::Group	*VideoBenchGrp;
		osg::Group	*VideoBenchNode;

	//++++++++++++++++++++++++++++++++++++

public:
	//===============================
	//interaction with the VideoBench
		enum VideoBenchAction
		{
			ACT_NOTHING,
			ACT_GET_FIRST_FRAME,
			ACT_GET_NEXT_FRAME,
			ACT_GET_PREVIOUS_FRAME,
			ACT_GET_NEXT_FRAME_GRP,
			ACT_GET_PREVIOUS_FRAME_GRP,
			ACT_PLAY,
			ACT_PAUSE,
			ACT_STOP,
			ACT_THRESHOLD_UP,
			ACT_THRESHOLD_DOWN,
			ACT_THRESHOLD_AUTO_SWITCH,
			ACT_IMG_PROC_MODE_SWITCH,
			ACT_POSE_ESTIM_SWITCH,
			ACT_DETECTLITE_SWITCH,
			ACT_UNDISTORT_MODE,
			ACT_REFRESH_FRAME,
			ACT_SET_IDLE,
			ACT_SET_RECORDING,
			ACT_SET_BENCHMARKING			
		};

		std::vector<VideoBenchAction>	ActionBuffer;
		void AddAction(VideoBenchAction _Action);
		void ProcessActions();

		void SetState(VideoBenchAction _newState);
		VideoBenchAction GetState();
	//====================================
		
protected:
		VideoBenchAction	CurrentState;
		bool				NewFrame;
		bool				ShowNewFrame;
		//+++++++++++++++++++++++++++++++

	//frame management ======================
		CL_FrameRecordGrp * CurrentFrameGrp;	//!< Active frame group from the FrameGrpMngr.
		int					CurrentFrameGrpID;	//!< ID of the current frame group.
		int					CurrentFrameID;		//!< Active frame from the Active frame group.
		osgART::CL_FrameRecord *	CurrentFrame;	//!< ID of the current frame from the current frame group.
		int					CurrentTempScreenShotID;//!< ID of the current screenshot we are processing.
	//=======================================
		std::string		WorkingPath;		//!< Working path to find the screenshot files.
		std::string		XMLFileName;		//!< XML file name containing all the benchmark data.

	SG_TRC::CL_TimerVal		StartTime;		//!< Store the system time of the execution of the function StartTimer(). So all the frame times are relative to this one.
	CL_OpenCVCamParam		* CVCamParam;	//!< Contain the OpenCV Calibration parameters.
#if YCK_BENCH_IR_TRAKER
	osgVRPN::Tracker		* IRFlyCam;		//!< Pointer to the VRPN flystick.
	osgVRPN::Tracker		* IRFlyPatt;	//!< Pointer to a second VRPN tracker that could be used for pattern calibration.
	osgVRPN::Button			* IRFlyButton;	//!< Pointer to the VRPN buttons of the flystick.
	bool					  IRTriggerDown;//!< Store the state of the first button of the FlyStick.
#endif
	int						  BenchMode;	//!< Store the actual benchmarking mode.
		
	//used for Traker Tweaking 'TTWK'
	int							m_TTWK_Threshold;		//!< Threshold value used to test the plugins.
	bool						m_TTWK_ThresholdAuto;	//!< Auto Threshold value used to test the plugins.
	int							m_TTWK_PoseEstimMode;	//!< Pose estimation mode used to test the plugins.
	bool						m_TTWK_DetectLite;		//!< arDetect mode used to test the plugins.
	int							m_TTWK_UndistortMode;	//!< Undistortion mode used to test the plugins.
	int							m_TTWK_ImageProcMode;	//!< False = Half size, true = Full size.
	//=========================

	osg::Matrix					Current_IR_ARPattern_Mat;//!< ?? don't remember..???
	osg::ref_ptr<osgProducer::Viewer>	m_viewer;		 //!< Ref pointer to the viewer we want to draw to 

};
}; // namespace osgART


#endif //OSGART_CL_VIDEO_RECORD