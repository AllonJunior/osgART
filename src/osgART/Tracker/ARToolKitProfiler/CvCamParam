/*
 * osgART / AR Toolkit for OpenSceneGraph
 * (C) 2004-2006 HIT Lab NZ, University of Canterbury
 *
 * Licensing is governed by the LICENSE.txt which is 
 * part of this library distribution.
 *
 */

#ifndef OSGART_CVCAMPARAM
#define OSGART_CVCAMPARAM

/**
 * \file  ARToolKitTrackerProfiler
 * \author Yannick Allusse Yannick.Allusse@hitlabnz.org
 */

#include "Definition"


#if AR_TRACKER_PROFILE

#include "PosRecord"
#include "osgART/Export"
#include <osg/vec3>
#include <osg/quat>
#include <osg/matrix>
#include <osg/uniform>
#include <string>

#include <SG_TLS_xml_container.h>
#include <osg\notify>

namespace osgART {
using namespace SGE;

/*!\class CL_OpenCVCamParam 
*\brief Object to store OpenCV camera parameters.
*\code
exemple of OpenCV camera param file
CameraMatrix:
M[0.0]=         402.1146545M[0.1]=           0.0000000M[0.2]=         151.5555573
M[1.0]=           0.0000000M[1.1]=         401.4277954M[1.2]=         113.1543045
M[2.0]=           0.0000000M[2.1]=           0.0000000M[2.2]=           1.0000000

Distortion:
D[0]=		-0.023552
D[1]=		0.017186
D[2]=		-0.004647
D[3]=		-0.007151

CameraTransVect:
T[0]=          -3.0680437
T[1]=           7.5792866
T[2]=         150.3025665
CameraRotVect:
R[0]=          -0.2307159
R[1]=           0.2173896
R[2]=           3.0929086
\endcode
*\author Yannick ALLUSSE
*/
class OSGART_EXPORT CL_OpenCVCamParam 
	:public	CL_XML_BASE_OBJ<std::string>
{
public:
	CL_OpenCVCamParam(std::string _FileName);
	~CL_OpenCVCamParam();

	/**
	* \brief Open a opencv calibration file generated with the directx filter "calib_filter" from OpenCV.
	* \note You must use the "calib_filter" patched version supply with osgART and launch it via GraphEdit.
	*/
	bool ReadParamFile(std::string _FileName);
	//bool SaveParamFile();

	/**
	* \brief Store some calibraion position recorded in the VisionSpace like : 
		CV_CAM =>	openCV camera transformation(transformation relative to the openCV pattern).
		IR_CAM =>	IR camera transformation.
		IR_CV_PATT=>	IR pattern transformation.
	*/
	CL_XML_MNGR<CL_PosRecord ,std::string>	PosMngr;

	/**
	* \brief Calculate the transformation between the physical camera and the virtual camera using the OpenCV calibration file and the transformations recorded in the VisionSpace.
	*/
	osg::Matrix GetVirtualCameraTransform();
	double* GetProjectionMatrix(float nearClip = 10., float farClip = 8000.);

	void PrintAllMatrix();
	
	/**
	* \brief Calculate the transformation between the IR tracker 'camera' and 'tracker'.
	*/
	osg::Matrix GetIRTransform();
	
	/**
	* \brief Calculate the transformation between the CV tracker 'camera' and 'tracker'.
	*/
	osg::Matrix GetCVTransform();

protected:
	osg::Matrix3	m_CVMat;
	osg::Vec4d		m_CVDistorsion;
	
	double			m_projectionMatrix[16];

#if _SG_TLS_XML
public:
	virtual TiXmlElement* XMLLoad(TiXmlElement* _XML_ROOT);
	virtual TiXmlElement* XMLSave(TiXmlElement* _XML_ROOT);
#endif
};

};//namespace

#endif //AR_TRACKER_PROFILE
#endif //OSGART_CVCAMPARAM
