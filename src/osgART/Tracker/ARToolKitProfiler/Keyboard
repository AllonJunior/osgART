/*
 * osgART / AR Toolkit for OpenSceneGraph
 * (C) 2004-2006 HIT Lab NZ, University of Canterbury
 *
 * Licensing is governed by the LICENSE.txt which is 
 * part of this library distribution.
 *
 */

#ifndef OSGART_PROFILER_KEYBOARD_H
#define OSGART_PROFILER_KEYBOARD_H

/**
 * \file  Keuboard
 * \author Yannick Allusse Yannick.Allusse@hitlabnz.org
 */

#include "osgART/Export"
#include <string>
#include "ProfilerTools"
#include "VideoBench"


#if 0
class KeyboardModel : public osg::Referenced
{
public:

        KeyboardModel() { createKeyboard(); }
        
        osg::Group* getScene() { return _scene.get(); }
        
        void keyChange(int key,int value);
        
protected:
        
        ~KeyboardModel() {}

        //osg::Switch* addKey(osg::Vec3& pos, int key,const std::string& text,float width, float height);
        osg::Switch* addKey(int key,osg::Switch* sw);

        void createKeyboard();

        typedef std::map<int, osg::ref_ptr<osg::Switch> > KeyModelMap;
        
        //osg::ref_ptr<osg::Group>    _scene;
        KeyModelMap                 _keyModelMap;
        //osg::ref_ptr<osgText::Text> _inputText;
};
#endif

namespace osgART{
class OSGART_EXPORT VideoBenchKeyboardEventHandler : public osgGA::GUIEventHandler
{
public:
	typedef std::map<int, CL_VideoBench::VideoBenchAction>	KeyMap;
        KeyMap						m_keyMap;

		//osg::ref_ptr<CL_VideoBench> m_VideoBench;
		CL_VideoBench *  m_VideoBench;


        VideoBenchKeyboardEventHandler(CL_VideoBench * _videoBench);

		void AddKeyLink(int _Key, CL_VideoBench::VideoBenchAction _Action);
    
        virtual bool handle(const osgGA::GUIEventAdapter& ea,osgGA::GUIActionAdapter&);
        virtual void accept(osgGA::GUIEventHandlerVisitor& v);
};


}//namespace osgART
#endif //OSGART_PROFILER_KEYBOARD_H