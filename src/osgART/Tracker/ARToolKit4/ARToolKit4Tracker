/*
 * osgART / AR Toolkit for OpenSceneGraph
 * (C) 2004-2006 HIT Lab NZ, University of Canterbury
 *
 * Licensing is governed by the LICENSE.txt which is 
 * part of this library distribution.
 *
 */

#ifndef OSGART_ARTTOOLKIT4TRACKER
#define OSGART_ARTTOOLKIT4TRACKER

/**
 * \file  ARToolKit4Tracker
 * \brief A wrapper class for ARToolkit4 tracking system.
 *
 * Support Marker-Based tracking based on computer vision based on ARToolKit
 * Algorithm. This class provided video/graphic independent marker detection and
 * support multiple marker tracking.
 *	
* \author Yannick Allusse Yannick.Allusse@hitlabnz.org
 */

#include "osgART/Export"
#include "osgART/Marker"
#include "osgART/GenericVideo"
#include "osgART/GenericTracker"

#include <string>

#include <AR/ar.h>

#include "ARToolKitTrackerProfiler"

namespace osgART {

	/**
	* \class ARToolKit4Tracker
	* \brief A tracker based on ARToolKit 4x. 
	* 
	* This tracker supports single and multi-markers.
	*
	*/
	class ARToolKit4Tracker : public
#if  AR_TRACKER_PROFILE
	ARToolKitTrackerProfiler<int>
#else
	GenericTracker
#endif
	{

	public:        
	   
		/** 
		* \brief constructor.
		*/
		ARToolKit4Tracker(void);

		/** 
		* \brief set the openGL parameters for the projection matrix.
		* 
		* Initialize internal parameters computation for delivers an openGL Matrix (modify
		* nothing to openGL state machine). 
		* \param n near field of view
		* \param f far field of view
		*/
		void setProjection(const double n, const double f);
		
		/** 
		* \brief Set the threshold value for the tracking algorithm.
		* 
		* Define the threshold used to binarize the image in ARToolKit4.
		* \param thresh integer value between 0 (dark) and 255 (bright) 
		*/
		void setThreshold(const int & thresh);
		
		/**
		* \brief Get the current threshold value for the tracking algorithm.
		*
		* \return The current threshold.
		*/
		int getThreshold(void)const;	
		

		unsigned char* getDebugImage();	
		void setDebugMode(const bool& d);
		bool getDebugMode()const;
		
		
		/** 
		* \brief Initialize ARToolKit4.
		* 
		* This core function initializes different parameters of ARToolKit4: load tracked markers, initialize
		* camera parameters.
		* \param xsize width of the image to analyze
		* \param ysize height of the image to analyze
		* \param pattlist_name a file structure of the marker
		* \param camera_name description file of the camera used (pinhole model)
		*/
		virtual bool init(int xsize, int ysize, 
			const std::string& pattlist_name = "Data/markers_list.dat", 
			const std::string& camera_name="Data/camera_para.dat");
		
		/** 
		* \brief Register a single marker with the tracker.
		* 
		* \param pattFile the pattern file name
		* \param width the width of the physical marker
		* \param center the x-y coordinates of the center of the marker (usually 0,0)
		* \return the internal ID of the new marker, or -1 on failure 
		*/
		int addSingleMarker(const std::string& pattFile, 
			double width, double center[2]);
		
		/** 
		* \brief Register a multi-marker with the tracker
		* 
		* \param multiFile the multi-marker configuration file name
		* \return the internal ID of the new marker, or -1 on failure
		*/
		int addMultiMarker(const std::string& multiFile);
		
		/** 
		* \brief set the image which will be used for tracking.
		* 
		* \param image Pointer to raw image pixels.
		* \param format OSGART-defined pixel format of the raw pixels. This will be converted
		*		to a format understood by ARToolKit4 internally.
		*/
		virtual void setImageRaw(unsigned char * image, PixelFormatType format = VIDEOFORMAT_GREY8);
		
		
		PixelFormatType ConvertARTPixelFormatToOSGART(int format)const;
		int ConvertOSGARTPixelFormatToART(PixelFormatType format)const;

		/** 
		* \brief update the tracking.
		* 
		* This core function applies the ARToolKit4 algorithm to the last image defined by setImage.
		*/
		void update();
		
		
		//yannick>>>>>>>>>
		ARPattHandle * CreateARPattHandle();
		int DeleteARPattHandle(ARPattHandle *_Hdle);
		int arMainPattListAttach();		
		int arMainPattListDetach();
		//=-------------------------
		
	protected:
	
		ARHandle * CreateARHandle(ART4_ARParam  *wparam);
		/** 
		 * \brief destructor.
		 */
		virtual ~ARToolKit4Tracker();
		
	private:
	
		ARPattHandle		*MainAR4_PattList;//main list of patterns
		ARHandle			*gARHandle;
		AR3DHandle			*gAR3DHandle;
		ARParam				m_cparam;
		bool				m_debugmode;
	
		bool setupMarkers(const std::string& patternListFile);
		
		std::string 		cparamName;
	};

};

#endif 


