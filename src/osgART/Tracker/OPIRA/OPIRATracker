/*
 *	osgART/Tracker/OPIRA/OPIRATracker
 *	osgART: ARToolKit for OpenSceneGraph
 *
 *	Copyright (c) 2005-2008 HIT Lab NZ
 *
 */
// @@OSGART_LICENSE_HEADER_BEGIN@@
// @@OSGART_LICENSE_HEADER_END@@

#ifndef OSGART_OPIRATRACKER
#define OSGART_OPIRATRACKER 1

/**
 * \file  OpiraTracker
 * \brief A wrapper class for OPIRA tracking system.
 *
 * \author Julian Looser julian.looser@hitlabnz.org
 * \author Raphael Grasset raphael.grasset@hitlabnz.org
 * \author Hartmut Seichter hartmut.seichter@hitlabnz.org
 */

#include "osgART/Export"
#include "osgART/Marker"
#include "osgART/Video"
#include "osgART/Tracker"

#include "OpiraLibrary.h"
#include "GestureLibrary.h"
#include "CaptureLibrary.h"
#include "OPIRALibraryMT.h"
#include "OCVSurf.h"
#include "highgui.h"

#include <string>

namespace osgART {


	class OPIRAMarker : public Marker {

	public:	
		
		OPIRAMarker(std::string filename);

        virtual bool isSameKindAs(const osg::Object* obj) const;
        virtual const char* className() const;
		virtual MarkerType getType() const;

		void update(OPIRALibrary::MarkerTransform* mt);
	    
	protected:
		virtual ~OPIRAMarker();
		
	};
	



class OPIRACalibration : public Calibration {

protected:

	std::string mCalibFilename;
	Capture* mCapture;

	~OPIRACalibration();

public:
	
	OPIRACalibration();
	
	
	Capture* getCapture();
	inline bool load(const std::string& filename);

	inline void setSize(int width, int height);
	
	virtual void undistort(double x, double y, double* u_x, double* u_y);

};




	/**
	* \class OPIRATracker
	* \brief A tracker based on OPIRA.
	*
	*/
	class OPIRATracker : public Tracker
	{

	public:        
	
		/** 
		* \brief constructor.
		*/
		OPIRATracker(void);
		
		virtual Calibration* getOrCreateCalibration();

				
		/** 
		* \brief update the tracking.
		* 
		* This core function applies the OPIRA algorithm to the last image defined by setImage.
		*/
		void update(osg::NodeVisitor*);
		
		
		/**
		 * Adding a single or multimarker
		 */
		virtual Marker* addMarker(const std::string& config);
		
		/**
		 * Removing a single or multimarker
		 */		
		virtual void removeMarker(Marker* marker);
			
			
		/**
		 * \brief Returns a training support instance for the OPIRA tracker;
		 */	
		virtual TrainingSupport* getTrainingSupport();
			
			
				
	protected:
	
		/** 
		 * \brief destructor.
		 */
		virtual ~OPIRATracker();
		
		virtual void setImage(osg::Image* image);
				
	private:
	
		std::string _registrationPolicy;
		std::string _featureDetectorType;
	
		OPIRALibrary::Registration *mRegistration;
	
		OPIRALibrary::Registration* getOrCreateRegistration();
		OPIRALibrary::Registration* getRegistration();
	
		void cleanupMarkers(void);
	
		IplImage* mFrame;
		
	};

};

#endif 


