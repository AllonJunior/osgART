/* -*-c++-*- 
 * 
 * osgART - Augmented Reality ToolKit for OpenSceneGraph
 * 
 * Copyright (C) 2005-2009 Human Interface Technology Laboratory New Zealand
 * Copyright (C) 2010-2013 Raphael Grasset, Julian Looser, Hartmut Seichter
 *
 * This library is open source and may be redistributed and/or modified under
 * the terms of the OpenSceneGraph Public License (OSGPL) version 0.0 or
 * (at your option) any later version.  The full license is in LICENSE file
 * included with this distribution, and on the osgart.org website.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * OpenSceneGraph Public License for more details.
*/

#ifndef OSGART_ARTOOLKITTRACKER
#define OSGART_ARTOOLKITTRACKER 1

/**
 * \file  ARToolKitTracker
 * \brief A wrapper class for ARToolkit tracking system.
 *
 * Support Target-Based tracking based on computer vision based on ARToolKit
 * Algorithm. This class provided video/graphic independent target detection and
 * support multiple target tracking.
 *	
 * \author Philip Lamb philip.lamb@artoolworks.com
 * \author Julian Looser julian.looser@hitlabnz.org
 * \author Raphael Grasset raphael.grasset@hitlabnz.org
 * \author Hartmut Seichter hartmut.seichter@hitlabnz.org
 */

#include "osgART/Export"
#include "osgART/Target"
#include "osgART/Video"
#include "osgART/Tracker"

#include "ARToolKitTrainingSupport"

#include <string>


namespace osgART {

	/**
	* \class ARToolKitTracker
	* \brief A tracker based on ARToolKit 2x. 
	* 
	* This tracker supports single and multi-targets.
	*
	*/
	class ARToolKitTracker : public Tracker
	{

	public:        

	   
	   static const int ARTOOLKIT_DEFAULT_THRESHOLD;
	   static const float ARTOOLKIT_DEFAULT_NEAR_PLANE;
	   static const float ARTOOLKIT_DEFAULT_FAR_PLANE;
	   
		/** 
		* \brief constructor.
		*/
		ARToolKitTracker(void);

		/** 
		* \brief set the openGL parameters for the projection matrix.
		* 
		* Initialize internal parameters computation for delivers an openGL Matrix (modify
		* nothing to openGL state machine). 
		* \param n near field of view
		* \param f far field of view
		*/
		void setProjection(const double n, const double f);
		
		/** 
		* \brief Set the threshold value for the tracking algorithm.
		* 
		* Define the threshold used to binarize the image in ARToolkit.
		* \param thresh integer value between 0 (dark) and 255 (bright) 
		*/
		void setThreshold(const int& thresh);
		
		/**
		* \brief Get the current threshold value for the tracking algorithm.
		*
		* \return The current threshold.
		*/
		int getThreshold() const;	
		
		/** 
		* \brief Switch on or off the debug mode in ARToolKit
		* 
		* \param b true = debug mode on/ false debug mode of
		*/
		void setDebugMode(const bool& b);
		
		/**
		* \brief Query if debug mode is switched on or off.
		*
		* \return Current state of debug mode.
		*/
		bool getDebugMode() const;
		
		
		virtual CameraConfiguration* getOrCreateCameraConfiguration();

		/** 
		* \brief Register a single target with the tracker.
		* 
		* \param pattFile the pattern file name
		* \param width the width of the physical target
		* \param center the x-y coordinates of the center of the target (usually 0,0)
		* \return the internal ID of the new target, or -1 on failure 
		*/
		int addSingleTarget(const std::string& pattFile, 
			double width, double center[2]);
		
		/** 
		* \brief Register a multi-target with the tracker
		* 
		* \param multiFile the multi-target configuration file name
		* \return the internal ID of the new target, or -1 on failure
		*/
		int addMultiTarget(const std::string& multiFile);
				
		void update();
		/** 
		* \brief update the tracking.
		* 
		* This core function applies the ARToolKit algorithm to the last image defined by setImage.
		*/
        void updateCallback(osg::NodeVisitor *nv);
		
		/**
		 * Adds an ARToolKit target based on the config string. The format for the configuration string is either:
		 * single;filename;width;centre_x;centre_y
		 * for a single target where filename points to a pattern file, width is the size in mm, and centre_x and centre_y define the tracking offset from the centre of the pattern.		 
		 * multi;filename
		 * where filename points to a multitarget configuration file (see the ARToolKit documentation for more information).
		 * \param config Target configuration string.
		 * \return A new target instance, or NULL if the target could not be added
		 */
		virtual Target* addTarget(const std::string& config);
		
		/**
		 * Removing a single or multitarget
		 */		
		virtual void removeTarget(Target* target);
			
			
		/**
		 * \brief Returns a training support instance for the ARToolKit tracker.
		 * \return A training support instance for ARToolKit
		 */	
		virtual TrackerTrainingSupport* getTrainingSupport();


        /**
         * @brief get indication what the tracker supports
         * @return
         */
        Tracker::Traits getTraits();


        /**
         * @brief creates a video
         * @return instance of a video interface
         */
        Video *createVideo();



    protected:
	
		/** 
		 * \brief destructor.
		 */
		virtual ~ARToolKitTracker();

		virtual void setImage(osg::Image* image,bool useInternalVideo = false);
				
	private:
	
		osg::ref_ptr<osg::Image> m_debugimage;
		
		struct				CameraParameter;
		CameraParameter*	m_cparam;
	
		bool setupTargets(const std::string& patternListFile);
		void cleanupTargets(void);

		std::string 		cparamName;
		int					m_threshold;
		int					m_target_num;
		
		bool				m_useHistory;
	
		osg::ref_ptr<ARToolKitTrainingSupport> mTrainer;
		        
        int getARPixelFormatForImage(const osg::Image& _image) const;
		int getGLPixelFormatForARPixelFormat(const int arPixelFormat, GLenum *internalformat_GL, GLenum *format_GL, GLenum *type_GL) const;
	};

};

#endif 


