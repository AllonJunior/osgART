///////////////////////////////////////////////////////////////////////////////
// File name : MultiART4Marker.C
//
// Creation : YYY
//
// Version : YYY
//
// Author : Raphael Grasset
//
// email : Raphael.Grasset@imag.fr
//
// Purpose : ??
//
// Distribution :
//
// Use :
//	??
//
// Todo :
//	O ??
//	/
//	X
//
// History :
//	YYY : Mr Grasset : Creation of the file
///////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////////
// include file
///////////////////////////////////////////////////////////////////////////////

#include <osgART/MultiART4Marker>

using namespace std;
using namespace osgART;

///////////////////////////////////////////////////////////////////////////////
// Macro 
///////////////////////////////////////////////////////////////////////////////

#if defined(NO_DEBUG)
#define ASSERT(x)
#else //defined(NO_DEBUG)
#define ASSERT(x) if(!(x)) \
    { cerr << "Assertion failed : (" << #x << ')' << endl \
    << "In file : " << __FILE__ << "at line #" << __LINE__ << endl \
    << "Compiled the " << __DATE__ << " at " << __TIME__ << endl; abort();}
#endif // else defined(NO_DEBUG)

const char* const MultiART4Marker_RCS_ID = "@(#)class MultiART4Marker definition.";

///////////////////////////////////////////////////////////////////////////////
// class MultiART4Marker
///////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////////
// Static variable
///////////////////////////////////////////////////////////////////////////////


///////////////////////////////////////////////////////////////////////////////
// PUBLIC: Standard services 
///////////////////////////////////////////////////////////////////////////////

MultiART4Marker::MultiART4Marker():Marker()
{

}

MultiART4Marker::~MultiART4Marker(void)
{
    
}

///////////////////////////////////////////////////////////////////////////////
// PUBLIC : Interface 
///////////////////////////////////////////////////////////////////////////////

void 
MultiART4Marker::SelfDisplay(ostream& stream) const
{
   stream << "< class MultiART4Marker >" << endl;
}

bool 
MultiART4Marker::OK(void) const
{
    return true;
}

/* virtual */
Marker::MarkerType MultiART4Marker::getType() const
{
	return Marker::ART_MULTI;
}


void MultiART4Marker::setActive(bool a) {
	m_active = a;
	
	//TO FIX HERE
}


bool 
MultiART4Marker::initialise(char* multiFile) 
{
	m_multi = arMultiReadConfigFile(multiFile);
	m_multi->prevF=false;//don't user history
	return (m_multi != NULL);
}

void 
MultiART4Marker::update(AR3DHandle *ar3DHandle,ARMarkerInfo* markerInfo, int markerCount) 
{
	std::cerr<<"to update.."<<std::endl;
	for (int i=0;i<m_multi->marker_num;i++)
	{
		m_multi->marker[i].visible=-1;
	}
	//arGetTransMatMultiSquare(ar3DHandle,markerInfo, markerCount, m_multi);

	for (int i=0;i<m_multi->marker_num;i++)
	{
		m_valid|=(m_multi->marker[i].visible==-1?false:true);
	}
	if (m_valid)
		updateTransform(m_multi->trans);
		
}

///////////////////////////////////////////////////////////////////////////////
// PROTECTED : Services
///////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////////
// PRIVATE : Services
///////////////////////////////////////////////////////////////////////////////