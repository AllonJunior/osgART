// ***************************************************************************
//
//   Generated automatically by genwrapper.
//   Please DO NOT EDIT this file!
//
// ***************************************************************************

#include <osgIntrospection/ReflectionMacros>
#include <osgIntrospection/TypedMethodInfo>
#include <osgIntrospection/StaticMethodInfo>
#include <osgIntrospection/Attributes>

#include <osgART/Marker>

// Must undefine IN and OUT macros defined in Windows headers
#ifdef IN
#undef IN
#endif
#ifdef OUT
#undef OUT
#endif

BEGIN_ENUM_REFLECTOR(osgART::Marker::MarkerType)
	I_EnumLabel(osgART::Marker::ART_UNKOWN);
	I_EnumLabel(osgART::Marker::ART_SINGLE);
	I_EnumLabel(osgART::Marker::ART_MULTI);
	I_EnumLabel(osgART::Marker::ART_NFT);
END_REFLECTOR

BEGIN_ABSTRACT_OBJECT_REFLECTOR(osgART::Marker)
//	I_BaseType(osgART::FieldContainer);
	I_Constructor0();
	I_Method0(osgART::Marker::MarkerType, getType);
	I_Method0(bool, isValid);
	I_Method0(const osg::Matrix &, getTransform);
	//I_Method1(void, setRotationalSmoothing, IN, float, r);
	//I_Method0(float, getRotationalSmoothing);
	//I_Method1(void, setTranslationalSmoothing, IN, float, t);
	//I_Method0(float, getTranslationalSmoothing);
	I_Method1(void, setName, IN, const std::string &, name);
	I_Method0(const std::string &, getName);
	I_Method1(void, setActive, IN, bool, active);
	I_Method0(bool, isActive);
	I_WriteOnlyProperty(bool, Active);
	I_Property(const std::string &, Name);
	//I_Property(float, RotationalSmoothing);
	I_ReadOnlyProperty(const osg::Matrix &, Transform);
	//I_Property(float, TranslationalSmoothing);
	I_ReadOnlyProperty(osgART::Marker::MarkerType, Type);
END_REFLECTOR


BEGIN_OBJECT_REFLECTOR(osgART::MarkerContainer)
	I_BaseType(osgART::Marker);
	I_Constructor1(IN, osgART::Marker*, marker);
	I_Method1(void, setActive, IN, bool, active);
	I_Method0(bool, isValid);
	I_Method0(osgART::Marker::MarkerType, getType);
END_REFLECTOR
