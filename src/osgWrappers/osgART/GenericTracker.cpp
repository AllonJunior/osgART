// ***************************************************************************
//
//   Generated automatically by genwrapper.
//   Please DO NOT EDIT this file!
//
// ***************************************************************************

#include <osgIntrospection/ReflectionMacros>
#include <osgIntrospection/TypedMethodInfo>
#include <osgIntrospection/StaticMethodInfo>
#include <osgIntrospection/Attributes>

#include <osgART/GenericTracker>
#include <osgART/GenericVideo>
#include <osgART/Marker>
#include <osgART/VideoConfig>

// Must undefine IN and OUT macros defined in Windows headers
#ifdef IN
#undef IN
#endif
#ifdef OUT
#undef OUT
#endif

BEGIN_ABSTRACT_OBJECT_REFLECTOR(osgART::GenericTracker)
//	I_BaseType(osgART::FieldContainer);
	I_Constructor0();
	I_Method0(void, update);
	I_MethodWithDefaults4(bool, init, IN, int, xsize, , IN, int, ysize, , IN, const std::string &, pattlist_name, "Data/markers_list.dat", IN, const std::string &, camera_name, "Data/camera_para.dat");
	I_Method0(int, getId);
//	I_MethodWithDefaults2(void, setImageRaw, IN, unsigned char *, image, , IN, osgART::PixelFormatType, format, osgART::VIDEOFORMAT_GREY8);
	I_Method1(void, setImageSource, IN, osg::Image *, image);
	I_Method1(osgART::Marker *, getMarker, IN, int, markerId);
	I_Method0(unsigned int, getMarkerCount);
	I_Method0(const double *, getProjectionMatrix);
	I_ReadOnlyProperty(int, Id);
	I_WriteOnlyProperty(osg::Image *, ImageSource);
	I_ReadOnlyProperty(unsigned int, MarkerCount);
	I_ReadOnlyProperty(const double *, ProjectionMatrix);
END_REFLECTOR

BEGIN_OBJECT_REFLECTOR(osgART::TrackerContainer)
	I_BaseType(osgART::GenericTracker);
	I_Constructor1(IN, osgART::GenericTracker *, tracker);
	I_Method0(osg::Projection *, createProjection);
	I_Method0(void, update);
	I_MethodWithDefaults3(bool, init, IN, osgART::GenericVideo*, video, , IN, const std::string &, pattlist_name, "Data/markers_list.dat", IN, const std::string &, camera_name, "Data/camera_para.dat");
END_REFLECTOR

