// ***************************************************************************
//
//   Generated automatically by genwrapper.
//   Please DO NOT EDIT this file!
//
// ***************************************************************************

#include <osgIntrospection/ReflectionMacros>
#include <osgIntrospection/TypedMethodInfo>
#include <osgIntrospection/StaticMethodInfo>
#include <osgIntrospection/Attributes>

#include <osg/Vec2s>
#include <osgART/VideoConfig>

// Must undefine IN and OUT macros defined in Windows headers
#ifdef IN
#undef IN
#endif
#ifdef OUT
#undef OUT
#endif

BEGIN_VALUE_REFLECTOR(osgART::VideoConfig)
	I_DeclaringFile("osgART/VideoConfig");
	I_Constructor0(____VideoConfig,
	               "",
	               "");
	I_Method0(int, getID,
	          Properties::VIRTUAL,
	          __int__getID,
	          "",
	          "");
	I_Method1(void, setID, IN, int, id,
	          Properties::VIRTUAL,
	          __void__setID__int,
	          "",
	          "");
	I_Method0(float, getFramerate,
	          Properties::VIRTUAL,
	          __float__getFramerate,
	          "",
	          "");
	I_Method1(void, setFrameRate, IN, float, framerate,
	          Properties::NON_VIRTUAL,
	          __void__setFrameRate__float,
	          "",
	          "");
	I_Method0(const std::string &, getDevice,
	          Properties::VIRTUAL,
	          __C5_std_string_R1__getDevice,
	          "",
	          "");
	I_Method1(void, setDevice, IN, const std::string &, devicename,
	          Properties::NON_VIRTUAL,
	          __void__setDevice__C5_std_string_R1,
	          "",
	          "");
	I_Method0(const osg::Vec2s &, getSize,
	          Properties::VIRTUAL,
	          __C5_osg_Vec2s_R1__getSize,
	          "",
	          "");
	I_Method1(void, setSize, IN, const osg::Vec2s &, size,
	          Properties::VIRTUAL,
	          __void__setSize__C5_osg_Vec2s_R1,
	          "",
	          "");
	I_Method2(void, setSize, IN, short, width, IN, short, height,
	          Properties::VIRTUAL,
	          __void__setSize__short__short,
	          "",
	          "");
	I_Method1(void, setPixelFormat, IN, const std::string &, fourcc,
	          Properties::VIRTUAL,
	          __void__setPixelFormat__C5_std_string_R1,
	          "",
	          "");
	I_Method0(void, showDeviceDialog,
	          Properties::VIRTUAL,
	          __void__showDeviceDialog,
	          "",
	          "");
	I_Method0(void, showFormatDialog,
	          Properties::VIRTUAL,
	          __void__showFormatDialog,
	          "",
	          "");
	I_SimpleProperty(const std::string &, Device, 
	                 __C5_std_string_R1__getDevice, 
	                 __void__setDevice__C5_std_string_R1);
	I_SimpleProperty(float, FrameRate, 
	                 0, 
	                 __void__setFrameRate__float);
	I_SimpleProperty(float, Framerate, 
	                 __float__getFramerate, 
	                 0);
	I_SimpleProperty(int, ID, 
	                 __int__getID, 
	                 __void__setID__int);
	I_SimpleProperty(const std::string &, PixelFormat, 
	                 0, 
	                 __void__setPixelFormat__C5_std_string_R1);
	I_SimpleProperty(const osg::Vec2s &, Size, 
	                 __C5_osg_Vec2s_R1__getSize, 
	                 __void__setSize__C5_osg_Vec2s_R1);
END_REFLECTOR

BEGIN_VALUE_REFLECTOR(osgART::VideoConfiguration)
	I_DeclaringFile("osgART/VideoConfig");
	I_Constructor0(____VideoConfiguration,
	               "",
	               "");
	I_PublicMemberProperty(int, id);
	I_PublicMemberProperty(int, width);
	I_PublicMemberProperty(int, height);
	I_PublicMemberProperty(osgART::FrameRateType, framerate);
	I_PublicMemberProperty(osgART::PixelFormatType, type);
	I_PublicMemberProperty(std::string, deviceconfig);
END_REFLECTOR

BEGIN_ENUM_REFLECTOR(osgART::PixelFormatType)
	I_DeclaringFile("osgART/VideoConfig");
	I_EnumLabel(osgART::VIDEOFORMAT_RGB555);
	I_EnumLabel(osgART::VIDEOFORMAT_RGB565);
	I_EnumLabel(osgART::VIDEOFORMAT_RGB24);
	I_EnumLabel(osgART::VIDEOFORMAT_BGR24);
	I_EnumLabel(osgART::VIDEOFORMAT_RGBA32);
	I_EnumLabel(osgART::VIDEOFORMAT_BGRA32);
	I_EnumLabel(osgART::VIDEOFORMAT_ARGB32);
	I_EnumLabel(osgART::VIDEOFORMAT_ABGR32);
	I_EnumLabel(osgART::VIDEOFORMAT_Y8);
	I_EnumLabel(osgART::VIDEOFORMAT_Y16);
	I_EnumLabel(osgART::VIDEOFORMAT_YUV444);
	I_EnumLabel(osgART::VIDEOFORMAT_YUV422);
	I_EnumLabel(osgART::VIDEOFORMAT_YUV422P);
	I_EnumLabel(osgART::VIDEOFORMAT_YUV411);
	I_EnumLabel(osgART::VIDEOFORMAT_YUV411P);
	I_EnumLabel(osgART::VIDEOFORMAT_YUV420P);
	I_EnumLabel(osgART::VIDEOFORMAT_YUV410P);
	I_EnumLabel(osgART::VIDEOFORMAT_GREY8);
	I_EnumLabel(osgART::VIDEOFORMAT_MJPEG);
	I_EnumLabel(osgART::VIDEOFORMAT_422YpCbCr8);
	I_EnumLabel(osgART::VIDEOFORMAT_422YpCbCr8R);
	I_EnumLabel(osgART::VIDEOFORMAT_ANY);
END_REFLECTOR

BEGIN_ENUM_REFLECTOR(osgART::FrameRateType)
	I_DeclaringFile("osgART/VideoConfig");
	I_EnumLabel(osgART::VIDEOFRAMERATE_1_875);
	I_EnumLabel(osgART::VIDEOFRAMERATE_3_75);
	I_EnumLabel(osgART::VIDEOFRAMERATE_5);
	I_EnumLabel(osgART::VIDEOFRAMERATE_7_5);
	I_EnumLabel(osgART::VIDEOFRAMERATE_10);
	I_EnumLabel(osgART::VIDEOFRAMERATE_15);
	I_EnumLabel(osgART::VIDEOFRAMERATE_30);
	I_EnumLabel(osgART::VIDEOFRAMERATE_PAL);
	I_EnumLabel(osgART::VIDEOFRAMERATE_NTSC);
	I_EnumLabel(osgART::VIDEOFRAMERATE_50);
	I_EnumLabel(osgART::VIDEOFRAMERATE_60);
	I_EnumLabel(osgART::VIDEOFRAMERATE_120);
	I_EnumLabel(osgART::VIDEOFRAMERATE_240);
	I_EnumLabel(osgART::VIDEOFRAMERATE_ANY);
	I_EnumLabel(osgART::VIDEOFRAMERATE_MAX);
END_REFLECTOR

