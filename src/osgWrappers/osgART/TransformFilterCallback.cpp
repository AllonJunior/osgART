// ***************************************************************************
//
//   Generated automatically by genwrapper.
//   Please DO NOT EDIT this file!
//
// ***************************************************************************

#include <osgIntrospection/ReflectionMacros>
#include <osgIntrospection/TypedMethodInfo>
#include <osgIntrospection/StaticMethodInfo>
#include <osgIntrospection/Attributes>

#include <osg/Matrix>
#include <osg/Node>
#include <osg/NodeVisitor>
#include <osgART/TransformFilterCallback>

// Must undefine IN and OUT macros defined in Windows headers
#ifdef IN
#undef IN
#endif
#ifdef OUT
#undef OUT
#endif

BEGIN_OBJECT_REFLECTOR(osgART::TransformFilterCallback)
	I_DeclaringFile("osgART/TransformFilterCallback");
	I_BaseType(osg::NodeCallback);
	I_Constructor0(____TransformFilterCallback,
	               "Constructor. ",
	               "");
	I_Method1(void, enableRotationalSmoothing, IN, bool, x,
	          Properties::NON_VIRTUAL,
	          __void__enableRotationalSmoothing__bool,
	          "enable/ disable rotational smoothing ",
	          " param true to enable, false to disable  ");
	I_Method0(bool, RotationalSmoothing,
	          Properties::NON_VIRTUAL,
	          __bool__RotationalSmoothing,
	          "test if rotational smoothing is enabled/disabled ",
	          "true if enabled, false if disabled  ");
	I_Method1(void, setRotationalSmoothingFactor, IN, float, x,
	          Properties::NON_VIRTUAL,
	          __void__setRotationalSmoothingFactor__float,
	          "set rotational smoothing factor ",
	          " param slerp parameter between 0.0 and 1.0  ");
	I_Method0(float, getRotationalSmoothingFactor,
	          Properties::NON_VIRTUAL,
	          __float__getRotationalSmoothingFactor,
	          "get current rotational smoothing factor ",
	          "current slerp parameter  ");
	I_Method1(void, enableTranslationalSmoothing, IN, bool, x,
	          Properties::NON_VIRTUAL,
	          __void__enableTranslationalSmoothing__bool,
	          "enable/disable translational smoothing ",
	          " param true to enable, false to disable  ");
	I_Method0(bool, TranslationalSmoothing,
	          Properties::NON_VIRTUAL,
	          __bool__TranslationalSmoothing,
	          "test if translational smoothing is enabled/disabled ",
	          "true if enabled, false if disabled  ");
	I_Method1(void, setTranslationalSmoothingFactor, IN, float, x,
	          Properties::NON_VIRTUAL,
	          __void__setTranslationalSmoothingFactor__float,
	          "set translational smoothing factor ",
	          " param bias toward previous translation between 0.0 and 1.0  ");
	I_Method0(float, getTranslationalSmoothingFactor,
	          Properties::NON_VIRTUAL,
	          __float__getTranslationalSmoothingFactor,
	          "get current translational smoothing factor ",
	          "current translational smoothing parameter  ");
	I_Method1(void, enableTransOutlierRejection, IN, bool, x,
	          Properties::NON_VIRTUAL,
	          __void__enableTransOutlierRejection__bool,
	          "enable/disable translational outlier rejection ",
	          " param true to enable, false to disable  ");
	I_Method0(bool, TransOutlierRejection,
	          Properties::NON_VIRTUAL,
	          __bool__TransOutlierRejection,
	          "test if translational outlier rejection is enabled/disabled ",
	          "true if enabled, false if disabled  ");
	I_Method1(void, setTransOutlierMaxNumber, IN, unsigned, int,
	          Properties::NON_VIRTUAL,
	          __void__setTransOutlierMaxNumber__unsigned,
	          "set max number of consequent rejections ",
	          " param number  ");
	I_Method0(unsigned int, getTransOutlierMaxNumber,
	          Properties::NON_VIRTUAL,
	          __unsigned_int__getTransOutlierMaxNumber,
	          "get current max number of consequent rejections ",
	          "current max number of consequent rejections  ");
	I_Method1(void, setTransOutlierDist, IN, float, x,
	          Properties::NON_VIRTUAL,
	          __void__setTransOutlierDist__float,
	          "set translational distance that characteristics rejections ",
	          " param distance in millimeters  ");
	I_Method0(float, getTransOutlierDist,
	          Properties::NON_VIRTUAL,
	          __float__getTransOutlierDist,
	          "get translational distance that characteristics rejections ",
	          "distance in millimeters  ");
	I_Method1(bool, isTransOutlier, IN, const osg::Matrix &, x,
	          Properties::NON_VIRTUAL,
	          __bool__isTransOutlier__C5_osg_Matrix_R1,
	          "test if outlier rejection is enabled/disabled ",
	          "true if enabled, false if disabled  ");
	I_SimpleProperty(float, RotationalSmoothingFactor, 
	                 __float__getRotationalSmoothingFactor, 
	                 __void__setRotationalSmoothingFactor__float);
	I_SimpleProperty(float, TransOutlierDist, 
	                 __float__getTransOutlierDist, 
	                 __void__setTransOutlierDist__float);
	I_SimpleProperty(unsigned, TransOutlierMaxNumber, 
	                 0, 
	                 __void__setTransOutlierMaxNumber__unsigned);
	I_SimpleProperty(float, TranslationalSmoothingFactor, 
	                 __float__getTranslationalSmoothingFactor, 
	                 __void__setTranslationalSmoothingFactor__float);
END_REFLECTOR

