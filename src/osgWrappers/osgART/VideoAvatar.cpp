// ***************************************************************************
//
//   Generated automatically by genwrapper.
//   Please DO NOT EDIT this file!
//
// ***************************************************************************

#include <osgIntrospection/ReflectionMacros>
#include <osgIntrospection/TypedMethodInfo>
#include <osgIntrospection/StaticMethodInfo>
#include <osgIntrospection/Attributes>

#include <osgART/GenericVideo>
#include <osgART/VideoAvatar>

// Must undefine IN and OUT macros defined in Windows headers
#ifdef IN
#undef IN
#endif
#ifdef OUT
#undef OUT
#endif

BEGIN_OBJECT_REFLECTOR(osgART::VideoAvatar)
	I_BaseType(osgART::GenericVideoObject);
	I_BaseType(osgART::GenericVideoObject);
	I_ConstructorWithDefaults1(IN, int, videoId, 0);
	I_Constructor1(IN, const osgART::GenericVideo &, video);
	I_Method0(void, init);
	I_MethodWithDefaults5(void, cropVideo, IN, int, x, , IN, int, y, , IN, int, width, , IN, int, height, , IN, bool, crop, true);
	I_Method1(void, setMatte, IN, bool, _matte);
	I_Method0(bool, getMatte);
	I_Method1(void, setMatteVideo, IN, int, videoId);
	I_Method0(int, getMatteVideo);
	I_Method1(void, setMatteColor, IN, osg::Vec3f, color);
	I_Method1(void, setChroma, IN, bool, _chroma);
	I_Method1(void, setChromaColor, IN, osg::Vec3f, color);
	I_ConstructorWithDefaults1(IN, int, videoId, 0);
	I_Constructor1(IN, const osgART::GenericVideo &, video);
	I_Method0(void, init);
	I_MethodWithDefaults5(void, cropVideo, IN, int, x, , IN, int, y, , IN, int, width, , IN, int, height, , IN, bool, crop, true);
	I_Method1(void, setMatte, IN, bool, _matte);
	I_Method0(bool, getMatte);
	I_Method1(void, setMatteVideo, IN, int, videoId);
	I_Method0(int, getMatteVideo);
	I_Method1(void, setMatteColor, IN, osg::Vec3f, color);
	I_Method1(void, setChroma, IN, bool, _chroma);
	I_Method1(void, setChromaColor, IN, osg::Vec3f, color);
	I_WriteOnlyProperty(bool, Chroma);
	I_WriteOnlyProperty(osg::Vec3f, ChromaColor);
	I_Property(bool, Matte);
	I_WriteOnlyProperty(osg::Vec3f, MatteColor);
	I_Property(int, MatteVideo);
END_REFLECTOR

BEGIN_OBJECT_REFLECTOR(osgART::VideoAvatar)
	I_BaseType(osgART::GenericVideoObject);
	I_BaseType(osgART::GenericVideoObject);
	I_ConstructorWithDefaults1(IN, int, videoId, 0);
	I_Constructor1(IN, const osgART::GenericVideo &, video);
	I_Method0(void, init);
	I_MethodWithDefaults5(void, cropVideo, IN, int, x, , IN, int, y, , IN, int, width, , IN, int, height, , IN, bool, crop, true);
	I_Method1(void, setMatte, IN, bool, _matte);
	I_Method0(bool, getMatte);
	I_Method1(void, setMatteVideo, IN, int, videoId);
	I_Method0(int, getMatteVideo);
	I_Method1(void, setMatteColor, IN, osg::Vec3f, color);
	I_Method1(void, setChroma, IN, bool, _chroma);
	I_Method1(void, setChromaColor, IN, osg::Vec3f, color);
	I_ConstructorWithDefaults1(IN, int, videoId, 0);
	I_Constructor1(IN, const osgART::GenericVideo &, video);
	I_Method0(void, init);
	I_MethodWithDefaults5(void, cropVideo, IN, int, x, , IN, int, y, , IN, int, width, , IN, int, height, , IN, bool, crop, true);
	I_Method1(void, setMatte, IN, bool, _matte);
	I_Method0(bool, getMatte);
	I_Method1(void, setMatteVideo, IN, int, videoId);
	I_Method0(int, getMatteVideo);
	I_Method1(void, setMatteColor, IN, osg::Vec3f, color);
	I_Method1(void, setChroma, IN, bool, _chroma);
	I_Method1(void, setChromaColor, IN, osg::Vec3f, color);
	I_WriteOnlyProperty(bool, Chroma);
	I_WriteOnlyProperty(osg::Vec3f, ChromaColor);
	I_Property(bool, Matte);
	I_WriteOnlyProperty(osg::Vec3f, MatteColor);
	I_Property(int, MatteVideo);
END_REFLECTOR

