// ***************************************************************************
//
//   Generated automatically by genwrapper.
//   Please DO NOT EDIT this file!
//
// ***************************************************************************

#include <osgIntrospection/ReflectionMacros>
#include <osgIntrospection/TypedMethodInfo>
#include <osgIntrospection/StaticMethodInfo>
#include <osgIntrospection/Attributes>

#include <osg/Image>
#include <osg/Node>
#include <osg/NodeVisitor>
#include <osg/Referenced>
#include <osg/Stats>
#include <osgART/Calibration>
#include <osgART/Marker>
#include <osgART/Tracker>

// Must undefine IN and OUT macros defined in Windows headers
#ifdef IN
#undef IN
#endif
#ifdef OUT
#undef OUT
#endif

BEGIN_OBJECT_REFLECTOR(osgART::Tracker)
	I_DeclaringFile("osgART/Tracker");
	I_BaseType(osg::Referenced);
	I_Constructor0(____Tracker,
	               "Constructor. ",
	               "");
	I_Method1(void, setImage, IN, osg::Image *, image,
	          Properties::VIRTUAL,
	          __void__setImage__osg_Image_P1,
	          "Set the image to analyzed. ",
	          " param video the video object to use  ");
	I_Method0(osgART::Calibration *, getOrCreateCalibration,
	          Properties::VIRTUAL,
	          __Calibration_P1__getOrCreateCalibration,
	          "Creates or gets the calibration object. ",
	          "calibration object  ");
	I_MethodWithDefaults1(void, update, IN, osg::NodeVisitor *, nv, 0L,
	                      Properties::VIRTUAL,
	                      __void__update__osg_NodeVisitor_P1,
	                      "update the tracking. ",
	                      " param nv NodeVisitor which should be used to get stats information  ");
	I_Method1(osgART::Marker *, getMarker, IN, int, markerId,
	          Properties::VIRTUAL,
	          __Marker_P1__getMarker__int,
	          "XXX. ",
	          "XXX. ");
	I_Method0(unsigned int, getMarkerCount,
	          Properties::NON_VIRTUAL,
	          __unsigned_int__getMarkerCount,
	          "",
	          "");
	I_Method0(const double *, getProjectionMatrix,
	          Properties::VIRTUAL,
	          __C5_double_P1__getProjectionMatrix,
	          "get the openGL projection matrix. ",
	          " param proj the openGL projection matrix computed  ");
	I_Method0(std::string, getLabel,
	          Properties::NON_VIRTUAL,
	          __std_string__getLabel,
	          "Return a string that contains the tracker name and version. ",
	          "");
	I_Method1(void, setEnable, IN, const bool &, _enable,
	          Properties::VIRTUAL,
	          __void__setEnable__C5_bool_R1,
	          "",
	          "");
	I_Method0(bool, getEnable,
	          Properties::VIRTUAL,
	          __bool__getEnable,
	          "",
	          "");
	I_Method1(osgART::Marker *, addMarker, IN, const std::string &, config,
	          Properties::VIRTUAL,
	          __Marker_P1__addMarker__C5_std_string_R1,
	          "Add a marker to the tracker. ",
	          " param config can contain the filename an ID or other tracker specific parameters   return Marker as been loaded from the tracker or 0 if it failed ");
	I_Method1(void, removeMarker, IN, osgART::Marker *, marker,
	          Properties::VIRTUAL,
	          __void__removeMarker__Marker_P1,
	          "Remove a marker. ",
	          " param marker pointer to the marker to be removed  ");
	I_Method0(osg::Stats *, getStats,
	          Properties::NON_VIRTUAL,
	          __osg_Stats_P1__getStats,
	          "",
	          "");
	I_Method1(void, setStats, IN, osg::Stats *, stats,
	          Properties::NON_VIRTUAL,
	          __void__setStats__osg_Stats_P1,
	          "",
	          "");
	I_StaticMethod1(osgART::Tracker *, cast, IN, osg::Referenced *, instance,
	                __Tracker_P1__cast__osg_Referenced_P1_S,
	                "Needed for plugin loaded objects which are used in other languages which don't support dynamic casting (e.g. ",
	                " param instance instance to be casted to a tracker   return 0 if can't cast otherwise correctly typed instance ");
	I_ProtectedMethod5(void, createUndistortedMesh, IN, int, width, IN, int, height, IN, float, maxU, IN, float, maxV, IN, osg::Geometry &, geometry,
	                   Properties::VIRTUAL,
	                   Properties::NON_CONST,
	                   __void__createUndistortedMesh__int__int__float__float__osg_Geometry_R1,
	                   "Creates an undistorted mesh, according to the camera lens distortion parameters known to the tracker. ",
	                   " param width width of the actual video  height height of the actual video  maxU texture coordinate maximum in u direction  maxV texture coordinate maximum in v direction  geometry geometry to be filled with an undistorted mesh  ");
	I_SimpleProperty(bool, Enable, 
	                 __bool__getEnable, 
	                 __void__setEnable__C5_bool_R1);
	I_SimpleProperty(osg::Image *, Image, 
	                 0, 
	                 __void__setImage__osg_Image_P1);
	I_SimpleProperty(std::string, Label, 
	                 __std_string__getLabel, 
	                 0);
	I_SimpleProperty(unsigned int, MarkerCount, 
	                 __unsigned_int__getMarkerCount, 
	                 0);
	I_SimpleProperty(const double *, ProjectionMatrix, 
	                 __C5_double_P1__getProjectionMatrix, 
	                 0);
	I_SimpleProperty(osg::Stats *, Stats, 
	                 __osg_Stats_P1__getStats, 
	                 __void__setStats__osg_Stats_P1);
END_REFLECTOR

BEGIN_OBJECT_REFLECTOR(osgART::TrackerCallback)
	I_DeclaringFile("osgART/Tracker");
	I_BaseType(osg::NodeCallback);
	I_StaticMethod2(osgART::TrackerCallback *, addOrSet, IN, osg::Node *, node, IN, osgART::Tracker *, tracker,
	                __TrackerCallback_P1__addOrSet__osg_Node_P1__osgART_Tracker_P1_S,
	                "Add or sets a TrackerCallback to any node. ",
	                " param node Node which will trigger an update on the attached tracker  tracker an instance of osgART::Tracker which is been updated  ");
	I_Constructor1(IN, osgART::Tracker *, tracker,
	               Properties::NON_EXPLICIT,
	               ____TrackerCallback__Tracker_P1,
	               "Creates a tracker callback. ",
	               "");
END_REFLECTOR

