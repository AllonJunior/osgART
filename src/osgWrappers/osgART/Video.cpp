// ***************************************************************************
//
//   Generated automatically by genwrapper.
//   Please DO NOT EDIT this file!
//
// ***************************************************************************

#include <osgIntrospection/ReflectionMacros>
#include <osgIntrospection/TypedMethodInfo>
#include <osgIntrospection/StaticMethodInfo>
#include <osgIntrospection/Attributes>

#include <OpenThreads/Mutex>
#include <osg/CopyOp>
#include <osg/Object>
#include <osg/Referenced>
#include <osgART/Video>
#include <osgART/VideoConfig>

// Must undefine IN and OUT macros defined in Windows headers
#ifdef IN
#undef IN
#endif
#ifdef OUT
#undef OUT
#endif

BEGIN_OBJECT_REFLECTOR(osgART::Video)
	I_DeclaringFile("osgART/Video");
	I_BaseType(osgART::VideoImageStream);
	I_Method0(osg::Object *, cloneType,
	          Properties::VIRTUAL,
	          __osg_Object_P1__cloneType,
	          "Clone the type of an object, with Object* return type. ",
	          "Must be defined by derived classes. ");
	I_Method1(osg::Object *, clone, IN, const osg::CopyOp &, x,
	          Properties::VIRTUAL,
	          __osg_Object_P1__clone__C5_osg_CopyOp_R1,
	          "Clone an object, with Object* return type. ",
	          "Must be defined by derived classes. ");
	I_Method1(bool, isSameKindAs, IN, const osg::Object *, obj,
	          Properties::VIRTUAL,
	          __bool__isSameKindAs__C5_osg_Object_P1,
	          "",
	          "");
	I_Method0(const char *, libraryName,
	          Properties::VIRTUAL,
	          __C5_char_P1__libraryName,
	          "return the name of the object's library. ",
	          "Must be defined by derived classes. The OpenSceneGraph convention is that the namespace of a library is the same as the library name. ");
	I_Method0(const char *, className,
	          Properties::VIRTUAL,
	          __C5_char_P1__className,
	          "return the name of the object's class type. ",
	          "Must be defined by derived classes. ");
	I_Constructor0(____Video,
	               "Default constructor. ",
	               "Initializes also the FieldContainer explicitly. ");
	I_ConstructorWithDefaults2(IN, const osgART::Video &, container, , IN, const osg::CopyOp &, copyop, osg::CopyOp::SHALLOW_COPY,
	                           ____Video__C5_Video_R1__C5_osg_CopyOp_R1,
	                           "Copy constructor. ",
	                           "Needed for cloning in OSG ");
//	I_Method0(OpenThreads::Mutex &, getMutex,
//	          Properties::NON_VIRTUAL,
//	          __OpenThreads_Mutex_R1__getMutex,
//	          "Get the mutex for a video object to lock against read/write operations. ",
//	          "reference to the internal mutex  ");
//	I_Method1(Field *, get, IN, const std::string &, name,
//	          Properties::NON_VIRTUAL,
//	          __Field_P1__get__C5_std_string_R1,
//	          "Access a field by its name. ",
//	          " param name Name of the field   return pointer to the field (0L if not found) ");
	I_Method0(osgART::VideoConfiguration *, getVideoConfiguration,
	          Properties::VIRTUAL,
	          __VideoConfiguration_P1__getVideoConfiguration,
	          "Get the video configuration struct. ",
	          "struct VideoConfiguration  ");
	I_Method2(void, setFlip, IN, bool, horizontal, IN, bool, vertical,
	          Properties::NON_VIRTUAL,
	          __void__setFlip__bool__bool,
	          "Set internal flipping. ",
	          " param horizontal switch on and off horizontal flipping  vertical switch on and off vertical flipping  ");
	I_StaticMethod1(osgART::Video *, cast, IN, osg::Referenced *, instance,
	                __Video_P1__cast__osg_Referenced_P1_S,
	                "Needed for plugin loaded objects which are used in other languages which don't support dynamic casting (e.g. ",
	                " param instance instance to be casted to a tracker   return 0 if can't cast otherwise correctly typed instance ");
//	I_SimpleProperty(OpenThreads::Mutex &, Mutex, 
//	                 __OpenThreads_Mutex_R1__getMutex, 
//	                 0);
	I_SimpleProperty(osgART::VideoConfiguration *, VideoConfiguration, 
	                 __VideoConfiguration_P1__getVideoConfiguration, 
	                 0);
END_REFLECTOR

