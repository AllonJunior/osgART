/* -*-c++-*- */

#ifndef IMAGE_CUBE_MAP
#define IMAGE_CUBE_MAP

#include <string>
#include <osg/Image>
#include <osgDB/ReadFile>
#include <osg/TextureCubeMap>

//#include "RenderToTexture"

namespace Face
{
    struct Data
    {
        int x, y;
        bool rotate, flip_vertical, flip_horizontal;
        std::string index_name;
    };

    const Data Values[6] =
    {
        { 2, 2, true , false, true , "posx" }, // POSITIVE_X
        { 0, 2, true , true , false, "negx" }, // NEGATIVE_X
        { 1, 2, false, false, false, "posy" }, // POSITIVE_Y
        { 1, 0, false, false, false, "negy" }, // NEGATIVE_Y
        { 1, 3, false, false, false, "posz" }, // POSITIVE_Z
        { 1, 1, false, true , true , "negz" }, // NEGATIVE_Z
    };

    enum Index
    {
        POSITIVE_X,
        NEGATIVE_X,
        POSITIVE_Y,
        NEGATIVE_Y,
        POSITIVE_Z,
        NEGATIVE_Z
    };

    class ImageToFace
    {
    private:
	  osg::Image * createFloatImage( int w, int h, int c, GLfloat * data );
	  GLfloat * copyFloatData( int x, int y, int w, int h, int c, osg::Image * image,
        bool rotate );    
    
        bool is_valid;
        int size, channels;
        osg::ref_ptr<osg::Image> image;
    public:
        bool setImage( osg::Image * image );
        bool valid() { return is_valid; };
        osg::Image * getFace( int index );
    };
};

class ImageCubeMap
{
private:
    osg::ref_ptr<osg::Image> images[6];
    Face::ImageToFace imagetoface;
    
public:
    bool readImageFile( const std::string filename,
            osgDB::ReaderWriter::Options * options = NULL );
    bool readImageFile( std::string prefix, std::string ext,
            osgDB::ReaderWriter::Options * options = NULL );
    void setIntoTexture( osg::TextureCubeMap * cubemap );
};

#endif /* IMAGE_CUBE_MAP */
