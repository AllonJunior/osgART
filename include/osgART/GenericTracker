/*
 * osgART / AR Toolkit for OpenSceneGraph
 * (C) 2004-2006 HIT Lab NZ, University of Canterbury
 *
 * Licensing is governed by the LICENSE.txt which is 
 * part of this library distribution.
 *
 */


#ifndef OSGART_GENERICTRACKER
#define OSGART_GENERICTRACKER 1


// std include
#include <map>
#include <iostream>

#include <osg/Geometry>

// local include
#include "osgART/Export"
#include "osgART/GenericVideo"
#include "osgART/Marker"
#include "osgART/Field"


namespace osgART {

	/* Forward declaration */
	class VideoLayer;

	/**
	 * \class GenericTracker.
	 * 
	 * Base class for a tracker which in the context of AR is an entity 
	 * that connects video streams, markers and their representation in
	 * the virtual environment.
	 */
	class OSGART_EXPORT GenericTracker : public osg::Referenced, 
		public FieldContainer<GenericTracker>
	{
	public:        
		/**
		 * \brief Constructor.
		 *
		 */
		GenericTracker();


		/** 
		 * \brief update the tracking.
		 * 
		 * This core function apply the Generic algorithm on the last 
		 * image defined by setImage.
		 */
		virtual void update() = 0;

	
		/**
		 *
		 */
		virtual bool init(int xsize, int ysize, 
			const std::string& pattlist_name="Data/markers_list.dat",
			const std::string& camera_name="Data/camera_para.dat") = 0;
	  

		/**
		* \brief get GenericVideo id.
		* \return a GenericVideo identifier.
		*/
		int getId();

		/** 
		* \brief Set the image to analyzed.
		* 
		* \param image the new image for the tracking 
		*/
		virtual 
		void setImageRaw(unsigned char* image, 
			PixelFormatType format = VIDEOFORMAT_GREY8);
	    
		/** 
		* \brief set the image to analyzed.
		* 
		* @param video the video object to use
		*/
		void setImage(GenericVideo* video);
	    
		/** 
		* \brief XXX.
		* 
		* XXX.
		*/
		Marker* getMarker(int markerId);
		
		unsigned int getMarkerCount() const;
		
		/** 
		* \brief get the openGL projection matrix.
		* 
		* delivers a usable matrix with openGL code (glLoadMatrixf(proj) with GL_MODELVIEW).
		* @param proj the openGL projection matrix computed
		*/
		virtual const double* getProjectionMatrix() const;
	
	    
	protected:		
	
	
		/**
		 * Creates an undistorted mesh, according to the 
		 * parameters know to the tracker
		 * \param width width of the actual video
		 * \param height height of the actual video
		 * \param maxU texture coordinate maximum in u direction
		 * \param maxV texture coordinate maximum in u direction
		 * \param geometry geometry to be filled with an
		 * undistorted mesh
		 */
		virtual void 
		createUndistortedMesh(int width, int height,
			float maxU, float maxV,
			osg::Geometry &geometry);
		
		/* only videolayer needs to access protected methods */	
		friend class VideoLayer;
	
		/** 
		 * \brief destructor.
		 *
		 */
		virtual ~GenericTracker();
	
		/**
		 * type for a vector of reference counted markers.
		 */
		typedef std::vector< osg::ref_ptr<Marker> > MarkerList;
		
		
		/**
		 * A list of markers associated with this tracker.
		 */ 
		MarkerList m_markerlist;

		
		unsigned char		*m_imageptr;
		PixelFormatType		 m_imageptr_format;
		
		
		double m_projectionMatrix[16];
	  
	private:

		int trackerId;
		static int trackerNum;
	};

};

#endif


