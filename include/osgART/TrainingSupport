/* -*-c++-*- 
 * 
 * osgART - ARToolKit for OpenSceneGraph
 * Copyright (C) 2005-2009 Human Interface Technology Laboratory New Zealand
 * 
 * This file is part of osgART 2.0
 *
 * osgART 2.0 is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * osgART 2.0 is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with osgART 2.0.  If not, see <http://www.gnu.org/licenses/>.
 *
 */

#ifndef OSGART_TRAININGSUPPORT
#define OSGART_TRAININGSUPPORT 1

#include "osgART/Export"

#include <osg/Referenced>
#include <osg/Array>
#include <osg/Image>

#include <string>

namespace osgART {

	class OSGART_EXPORT TrainingCandidate : public osg::Referenced {
		
		public:
		
			TrainingCandidate();
			
			virtual osg::Vec2Array* getOutline() { return NULL; }
			
			virtual void getSaveInfo(std::string& fileDescription, std::string& fileExtension) { 
				fileDescription = ""; 
				fileExtension = ""; 
			}
			
			virtual bool save(std::string filename) { return false; }
			
		protected:
			virtual ~TrainingCandidate();
	
	};

	class OSGART_EXPORT TrainingSet : public osg::Referenced
	{
		public:
			TrainingSet();
			
			typedef std::vector< osg::ref_ptr<TrainingCandidate> > TrainingCandidateList;
			
			TrainingCandidateList& getTrainingCandidates();
			
			virtual osg::Image* getImage() { return NULL; }
			
		protected:
			virtual ~TrainingSet();
			
			TrainingCandidateList mCandidates;
	
	};

	/**
	 * \class TrainingSupport.
	 * 
	 * Base class for marker training support. A tracker can optionally provide an
	 * implementation for supporting marker training.
	 */
	class OSGART_EXPORT TrainingSupport : public osg::Referenced
	{
	
	public:        
	
		TrainingSupport();
	
		virtual bool isEnabled() { 
			return mEnabled; 
		}
		
		virtual void setEnabled(bool e) { 
			mEnabled = e; 
		}
	
		virtual std::string getName() { return "Training Support Base"; }
	
		virtual TrainingSet* getLatestTrainingSet() { return NULL; }
	
	
	protected:
	
		virtual ~TrainingSupport();
		
		bool mEnabled;
		
	};


};

#endif