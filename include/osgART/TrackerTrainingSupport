/* -*-c++-*- 
 * 
 * osgART - Augmented Reality ToolKit for OpenSceneGraph
 * 
 * Copyright (C) 2005-2009 Human Interface Technology Laboratory New Zealand
 * Copyright (C) 2010-2014 Raphael Grasset, Julian Looser, Hartmut Seichter
 *
 * This library is open source and may be redistributed and/or modified under
 * the terms of the OpenSceneGraph Public License (OSGPL) version 0.0 or
 * (at your option) any later version.  The full license is in LICENSE file
 * included with this distribution, and on the osgart.org website.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * OpenSceneGraph Public License for more details.
*/

/**
 *  \file  TrackerTrainingSupport
 *  \brief Helper class for training a specific Tracker
 *
 * Helper class for training a specific Tracker.
 */

#ifndef OSGART_TRACKERTRAININGSUPPORT
#define OSGART_TRACKERTRAININGSUPPORT 1

// std include
#include <string>

// OpenThreads include

// OSG include
#include <osg/Referenced>
#include <osg/Array>
#include <osg/Image>

// local include
#include "osgART/Export"

namespace osgART {

	class OSGART_EXPORT TrainingCandidate : public osg::Referenced {
		
		public:
		
			TrainingCandidate();
			
			virtual osg::Vec2Array* getOutline() { return NULL; }
			
			virtual void getSaveInfo(std::string& fileDescription, std::string& fileExtension) { 
				fileDescription = ""; 
				fileExtension = ""; 
			}
			
			virtual bool save(std::string filename) { return false; }
			
		protected:
			virtual ~TrainingCandidate();
	
	};

	class OSGART_EXPORT TrainingSet : public osg::Referenced
	{
		public:
			TrainingSet();
			
			typedef std::vector< osg::ref_ptr<TrainingCandidate> > TrainingCandidateList;
			
			TrainingCandidateList& getTrainingCandidates();
			
			virtual osg::Image* getImage() { return NULL; }
			
		protected:
			virtual ~TrainingSet();
			
			TrainingCandidateList mCandidates;
	
	};

	/**
	 * \class TrackerTrainingSupport.
	 * 
	 * Base class for target training support. A tracker can optionally provide an
	 * implementation for supporting target training.
	 */
	class OSGART_EXPORT TrackerTrainingSupport : public osg::Referenced
	{
	
	public:        
	
		TrackerTrainingSupport();
	
		virtual bool isEnabled() { 
			return mEnabled; 
		}
		
		virtual void setEnabled(bool e) { 
			mEnabled = e; 
		}
	
		virtual std::string getName() { return "Training Support Base"; }
	
		virtual TrainingSet* getLatestTrainingSet() { return NULL; }
	
	
	protected:
	
		virtual ~TrackerTrainingSupport();
		
		bool mEnabled;
		
	};


};

#endif // OSGART_TRACKERTRAININGSUPPORT
