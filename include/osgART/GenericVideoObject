/*
 *	osgART/GenericVideoObject
 *	osgART: AR ToolKit for OpenSceneGraph
 *
 *	Copyright (c) 2005-2007 ARToolworks, Inc. All rights reserved.
 *	
 *	Rev		Date		Who		Changes
 *  1.0   	2006-12-08  ---     Version 1.0 release.
 *
 */
// @@OSGART_LICENSE_HEADER_BEGIN@@
// @@OSGART_LICENSE_HEADER_END@@

#ifndef OSGART_GENERICVIDEOOBJECT
#define OSGART_GENERICVIDEOOBJECT 1

//standard include
#include <iostream>
#include <string>

//graphics include
#include <osg/Node>
#include <osg/Group>
#include <osg/MatrixTransform>
#include <osg/Geometry>
#include <osg/Projection>

//personnal include
#include "osgART/Export"
#include "osgART/GenericVideoShader"
#include "osgART/GenericVideo"

namespace osgART {

	/**
	 * A generic interface for video sources. It implements the very
	 * basic video functionality been used in osgART. 
	 */

	class OSGART_EXPORT GenericVideoObject : public osg::Group
	{
	public:
	
		/** 
		 * \brief default constructor.
		 * \param videoId the number of the video used for the background
		 */    
		GenericVideoObject(osg::Image* image = 0L);
		
		/** 
		 * \brief Copy constructor.
		 * \param video
		 * \param copyop
		 */
		GenericVideoObject(const GenericVideoObject& video,
			const osg::CopyOp& copyop = osg::CopyOp::SHALLOW_COPY);
			
		
		META_Node(osgART, GenericVideoObject);
	
	
		/**
		 * Calculate power of two for OpenGL textures
		 * \param x dimension to be calculated
		 * \return power of two which is above or equal to the value given
		 */	
		static unsigned int mathNextPowerOf2(unsigned int x);
		        
	    
	    /** 
	     * Modes how the video is being rendered.
	     */
		enum TextureMode {
			USE_TEXTURE_DEFAULT = 0,	/**< Default texture mode */
			USE_TEXTURE_2D,				/**< Video is being pasted into a 2D texture */
			USE_TEXTURE_RECTANGLE,		/**< Video is being attached to a 2D rectangle */
		};

		/**
		 * Mode used to correct camera distortion.
		 */
		enum DistortionCorrectionMode {
			NO_CORRECTION,			/**< No correction is applied to the Texture */
			CAMERA_PARAM_CORRECTION	/**< The texture is being corrected from camera parameters */
		};


		/** 
		 * All initialisation needs to be done within here.
		 * 
		 */
		virtual void init();
	    
	    
	    /*
	    
		inline void setTexture(osg::Texture* vt) {
			m_vTexture=vt;
		}

		inline osg::ref_ptr<osg::Texture> getTexture() {
			return m_vTexture;
		}
		*/
	    
		inline void setShader(GenericVideoShader* vs) { 
			m_vShader=vs;
		}
	    
		inline osg::ref_ptr<GenericVideoShader> getShader() {
			return m_vShader;
		}    
	    
		inline void setTextureMode(TextureMode tm) {
			m_textureMode=tm;
		}

		inline TextureMode getTextureMode() const {
			return m_textureMode;
		}

		inline void setDistortionCorrectionMode(DistortionCorrectionMode dcm) {
			m_distortionMode=dcm;
		}

		inline DistortionCorrectionMode getDistorsionCorrectionMode() const {
			return m_distortionMode;
		}
		
		/**
		 * Set the connected video stream
		 */
		 virtual void setImageSource(osg::Image* video);
		
				
		/**
		 * Get the connected video stream
		 */
		 virtual osg::Image* getImageSource() const;
	    
	    
	protected:
	
	
		/**
		 * \brief destructor.
		 */
		virtual ~GenericVideoObject();
	
	
		osg::ref_ptr<GenericVideoShader>	m_vShader;
		// osg::ref_ptr<osg::Texture>			m_vTexture;

	
		osg::ref_ptr<osg::Image>			m_image;
		
	
		DistortionCorrectionMode m_distortionMode;
		TextureMode m_textureMode;
		
	};
};

#endif // !defined GenericVideoObject_h
