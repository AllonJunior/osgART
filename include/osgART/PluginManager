/*
 *	osgART/VideoImageStream
 *	osgART: AR ToolKit for OpenSceneGraph
 *
 *	Copyright (c) 2005-2007 ARToolworks, Inc. All rights reserved.
 *	
 *	Rev		Date		Who		Changes
 *  1.0   	2006-12-08  ---     Version 1.0 release.
 *
 */
// @@OSGART_LICENSE_HEADER_BEGIN@@
// @@OSGART_LICENSE_HEADER_END@@

#ifndef OSGART_PLUGINMANAGER
#define OSGART_PLUGINMANAGER 1

// osg
#include <osg/ref_ptr>
#include <osg/Referenced>

// osgDB
#include <osgDB/DynamicLibrary>

// STL
#include <string>
#include <deque>
#include <map>

// Local include
#include "osgART/Export"


namespace osgART 
{

	/**
	 * PluginManager realises an autodiscovery capable plugin system
	 * in order to load and unload plugins on the fly. It is losely 
	 * based on the implementation of osgDB::Registry
	 */
	class OSGART_EXPORT PluginManager : public osg::Referenced {
	public:
		
		/**
		 * Returns an instance of a plugin manager as it is 
		 * singleton.
		 * \param erase exlicitly deletes the instance of the plugin manager
		 * \return instance of the PluginManager or 0 if erase was true
		 */
		static PluginManager* getInstance(bool erase = false);
				
		/**
		 * Load an external plugin. The plugin will be loaded and 
		 * stays in memory unless explicitly unloaded.
		 * \param filename short version or complete path (use \param resolveName with false)
		 * \param if resolveName is false a file path with extension can be handed over
		 */
		void load(const std::string& filename, bool resolveName = true);
		
		/**
		 * Return a pointer to the plugin
		 * \param identifier to get the plugin instance
		 * \return 0 if unsuccessfull or a pointer to the plugin
		 */
		osg::Referenced* get(const std::string& identifier);

		/**
		 * Add a new instance of a dynamically loaded class
		 * \param name identifier to retrieve the object
		 * \param plugin pointer to the instantiated class
		 */
		void add(const std::string& name, osg::Referenced* plugin);

	protected:
		
		typedef std::deque< osg::ref_ptr<osgDB::DynamicLibrary> > PluginArray;
		typedef std::map< std::string, osg::ref_ptr<osg::Referenced> > PluginInterfaceMap;
		
		PluginArray m_plugins;
		PluginInterfaceMap m_plugininterfaces;
		
	private:
	
		PluginManager();
		virtual ~PluginManager();
		
	};
	
		
	/**
	 * PluginProxy is a helper to dynamicly instanciate and 
	 * register plugins in the libaries PluginManager.
	 */
	template <typename T> class PluginProxy 
	{
	public:
		/**
		 * Constructor for the dynamic loaded object
		 * \param name identifier to retrieve an instance
		 */
		PluginProxy(const std::string& name)
		{
			m_plugininterface = new T;			
			PluginManager::getInstance()->add(name, m_plugininterface.get());
		}
		
	protected:
		/**
		 * Stored instance of the plugiin
		 */
		osg::ref_ptr<osg::Referenced> m_plugininterface;		
	};
}

#endif
