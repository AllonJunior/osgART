#ifndef ARINFOHUD
#define ARINFOHUD

#include <osg/Node>
#include <osg/Group>
#include <osg/Geode>
#include <osg/Projection>
#include <osg/Depth>
#include <osgText/Text>

#include <osgART/ARToolKitTracker>
#include <osgART/ARTMarker>

class ARInfoHUD : public osg::Group, public osg::NodeCallback {

private:

	osgText::Text* mTitle;
	osgText::Text* mThreshold;
	osgText::Text* mDebugMode;
	osgText::Text* mMarkerInfo;


public:

	ARInfoHUD() : osg::Group(), osg::NodeCallback() {

		float width = 800;
		float height = 600;

		osg::Projection* projection = new osg::Projection();
		projection->setMatrix(osg::Matrix::ortho2D(0, width, 0, height));
		this->addChild(projection);
		
		osg::MatrixTransform* modelview = new osg::MatrixTransform();
		modelview->setMatrix(osg::Matrix::identity());
		modelview->setReferenceFrame(osg::Transform::ABSOLUTE_RF);

		projection->addChild(modelview);

		osg::Depth* depth = new osg::Depth;
		depth->setFunction(osg::Depth::ALWAYS);
		depth->setRange(1.0, 1.0);

		osg::StateSet* stateset = modelview->getOrCreateStateSet();
		stateset->setRenderBinDetails(500, "RenderBin");
		stateset->setAttribute(depth);

		osg::Geode* geode = new osg::Geode();
		modelview->addChild(geode);
	
		float xPosition = 25.0f;
		float yPosition = height - 25.0f;

#ifdef _WIN32		
		string font = "C:/WINDOWS/Fonts/COURBD.TTF";
#else
		string font = "";
#endif
		osg::Vec4 col(1.0f, 1.0f, 0.0f, 1.0f);
	
		mTitle = new osgText::Text();
		mTitle->setCharacterSize(32);
		mTitle->setFont(font);
		mTitle->setPosition(osg::Vec3(xPosition, yPosition, 0));
		//mTitle->setFontResolution(100, 100);
		mTitle->setColor(col);
		mTitle->setText("osgART");
		geode->addDrawable(mTitle);
		
		yPosition -= 50;
		
		mThreshold = new osgText::Text();
		mThreshold->setCharacterSize(20);
		mThreshold->setFont(font);
		mThreshold->setPosition(osg::Vec3(xPosition, yPosition, 0));
		//mThreshold->setFontResolution(100, 100);
		mThreshold->setColor(col);
		mThreshold->setText("Threshold");
		geode->addDrawable(mThreshold);
		
		yPosition -= 50;
		
		mDebugMode = new osgText::Text();
		mDebugMode->setCharacterSize(20);
		mDebugMode->setFont(font);
		mDebugMode->setPosition(osg::Vec3(xPosition, yPosition, 0));
		//mDebugMode->setFontResolution(100, 100);
		mDebugMode->setColor(col);
		mDebugMode->setText("Threshold");
		geode->addDrawable(mDebugMode);


		yPosition -= 50;
		
		mMarkerInfo = new osgText::Text();
		mMarkerInfo->setCharacterSize(20);
		mMarkerInfo->setFont(font);
		mMarkerInfo->setPosition(osg::Vec3(xPosition, yPosition, 0));
		//mMarkerInfo->setFontResolution(100, 100);
		mMarkerInfo->setColor(col);
		mMarkerInfo->setText("Markers");
		geode->addDrawable(mMarkerInfo);




		this->setUpdateCallback(this);

	}

	~ARInfoHUD() {
	
	}

	virtual void operator()(osg::Node* node, osg::NodeVisitor* nv) {
	
		stringstream ss;
		ss << "Threshold: " << ARToolKitTracker::getInstance()->getThreshold();
		mThreshold->setText(ss.str());
		
		ss.str("");
		bool d = ARToolKitTracker::getInstance()->getDebugMode();
		ss << "Debug: ";
		if (d) ss << "true";
		else ss << "false";
		mDebugMode->setText(ss.str());
		
		
		ss.str("");
		int count = ARToolKitTracker::getInstance()->getMarkerCount();
		ss << "Markers: " << count << "\n\n";
		
		for (int i = 0; i < count; i++) {
		
			osgART::ARTMarker* m = ARToolKitTracker::getInstance()->getMarker(i);
			string t = m->getType();
			t.resize(8, ' ');
			ss << i << ": " << t << m->getName() << "\n" 
			  << "   " << (m->isValid()?"true":"false") << "  " << (m->isActive()?"true":"false") << "\n\n";
		
		}
		
		
		mMarkerInfo->setText(ss.str());
		
		
		
		osg::NodeCallback::traverse(node,nv);
		
	}


};



#endif