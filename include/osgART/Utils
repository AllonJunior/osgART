/*
 *	osgART/Utils
 *	osgART: AR ToolKit for OpenSceneGraph
 *
 *	Copyright (c) 2005-2007 ARToolworks, Inc. All rights reserved.
 *	
 *	Rev		Date		Who		Changes
 *  1.0   	2006-12-08  ---     Version 1.0 release.
 *
 */
// @@OSGART_LICENSE_HEADER_BEGIN@@
// @@OSGART_LICENSE_HEADER_END@@


#ifndef OSGART_UTILS
#define OSGART_UTILS 1

// General
#include <iostream>

// STL
#include <string>
#include <vector>

// OpenSceneGraph
#include <osg/Notify>
#include <osg/Matrix>


// OSGART
#include "osgART/Export"
#include "osgART/Field"


namespace osgART {

	OSGART_EXPORT std::string	trim		(std::string& s,const std::string& drop = " ");
	// OSGART_EXPORT void			PrintMatrix	(std::string name, const osg::Matrix &Transform);	
	OSGART_EXPORT osg::Matrix	GenerateMatrix	(const osg::Vec3d & _trans, const osg::Vec3d & _rot);
	OSGART_EXPORT osg::Matrix	DiffMatrix		(const osg::Matrix & _base, const osg::Matrix & _m2);
	// OSGART_EXPORT void			PrintVector3D	(std::string name, const osg::Vec3d &Vec3d);
	
	OSGART_EXPORT std::vector<std::string> tokenize(const std::string& str, const std::string& delimiters);
	
	template <typename ContainerType, typename ObjType> 
		osg::ref_ptr< osgART::TypedField<ObjType> >
		SetField(osg::ref_ptr<ContainerType> Container, std::string Name, ObjType Value, std::string ErrorMsg="", bool ExitOnerror=false)
		{
			osg::ref_ptr< osgART::TypedField<ObjType> > _Field = 
					dynamic_cast< osgART::TypedField<ObjType>* >(Container->get(Name));
			
			if (_Field.valid())
			{	
				_Field->set(Value);
			}
			else 
			{
				if (ErrorMsg!= "")
					osg::notify(osg::WARN) << ErrorMsg << std::endl;
				if (ExitOnerror)
					exit(-1);
			}
			return _Field;
		}

};

#endif
