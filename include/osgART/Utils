/*
 *	osgART/Utils
 *	osgART: AR ToolKit for OpenSceneGraph
 *
 *	Copyright (c) 2005-2007 ARToolworks, Inc. All rights reserved.
 *	
 *	Rev		Date		Who		Changes
 *  1.0   	2006-12-08  ---     Version 1.0 release.
 *
 */
// @@OSGART_LICENSE_HEADER_BEGIN@@
// @@OSGART_LICENSE_HEADER_END@@


#ifndef OSGART_UTILS
#define OSGART_UTILS 1

// General
#include <iostream>

// STL
#include <string>
#include <iomanip>

// OpenSceneGraph
#include <osg/Notify>
#include <osg/Matrix>


// OSGART
#include "osgART/Export"
#include "osgART/Field"


namespace osgART {

	OSGART_EXPORT std::string	trim		(std::string& s,const std::string& drop = " ");
	OSGART_EXPORT void			PrintMatrix	(std::string name, const osg::Matrix &Transform);	
	OSGART_EXPORT osg::Matrix	GenerateMatrix	(const osg::Vec3d & _trans, const osg::Vec3d & _rot);
	OSGART_EXPORT osg::Matrix	DiffMatrix		(const osg::Matrix & _base, const osg::Matrix & _m2);
	OSGART_EXPORT void			PrintVector3D	(std::string name, const osg::Vec3d &Vec3d);
	
	template <typename ContainerType, typename ObjType> 
		osg::ref_ptr< osgART::TypedField<ObjType> >
		SetField(osg::ref_ptr<ContainerType> Container, std::string Name, ObjType Value, std::string ErrorMsg="", bool ExitOnerror=false)
		{
			osg::ref_ptr< osgART::TypedField<ObjType> > _Field = 
					dynamic_cast< osgART::TypedField<ObjType>* >(Container->get(Name));
			
			if (_Field.valid())
			{	
				_Field->set(Value);
			}
			else 
			{
				if (ErrorMsg!= "")
					osg::notify(osg::WARN) << ErrorMsg << std::endl;
				if (ExitOnerror)
					exit(-1);
			}
			return _Field;
		}
		
	
#define PD_LOOP 3

template <typename T> 
int Observer2Ideal(	const T dist_factor[4], 
					const T ox, 
					const T oy,
					T *ix, T *iy )
{
    T  z02, z0, p, q, z, px, py;
    register int i = 0;

    px = ox - dist_factor[0];
    py = oy - dist_factor[1];
    p = dist_factor[2]/100000000.0;
    z02 = px*px+ py*py;
    q = z0 = sqrt(px*px+ py*py);

    for( i = 1; ; i++ ) {
        if( z0 != 0.0 ) {
            z = z0 - ((1.0 - p*z02)*z0 - q) / (1.0 - 3.0*p*z02);
            px = px * z / z0;
            py = py * z / z0;
        }
        else {
            px = 0.0;
            py = 0.0;
            break;
        }
        if( i == PD_LOOP ) break;

        z02 = px*px+ py*py;
        z0 = sqrt(px*px+ py*py);
    }

    *ix = px / dist_factor[3] + dist_factor[0];
    *iy = py / dist_factor[3] + dist_factor[1];

    return(0);
}


};

#endif
