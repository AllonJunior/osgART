/* -*-c++-*- 
 * 
 * osgART - ARToolKit for OpenSceneGraph
 * Copyright (C) 2005-2009 Human Interface Technology Laboratory New Zealand
 * 
 * This file is part of osgART 2.0
 *
 * osgART 2.0 is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * osgART 2.0 is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with osgART 2.0.  If not, see <http://www.gnu.org/licenses/>.
 *
 */

#ifndef OSGART_MARKER
#define OSGART_MARKER 1

#include <string>
#include <vector>

// local headers
#include "osgART/Export"
#include "osgART/Field"

// OSG headers
#include <osg/Matrix>
#include <osg/Vec3>
#include <osg/Referenced>
#include <osg/ImageStream>


namespace osgART {

	/**
	* \class Marker
	* \brief A base class from which specific types of markers are derived.
	*/
	class OSGART_EXPORT Marker : public osg::Referenced, public FieldContainer<Marker>
	{
	public:

		enum MarkerType
		{
			ART_UNKNOWN = 0,/**< Unknown or unspecified marker type. */
			ART_SINGLE,		/**< A single marker. */
			ART_MULTI,		/**< A multi-marker. */
			ART_NFT,		/**< A natural feature tracking marker. */
			ART_NFT_OPIRA,	/**< A natural feature tracking marker for the OPIRA library. */
			ART_BAZAR		/**< A marker for the Bazar library. */
		};

		virtual osg::Object* cloneType() const { return reinterpret_cast<osg::Object*>(new Marker()); }

		virtual osg::Object* clone(const osg::CopyOp& copyop) const { return reinterpret_cast<osg::Object*>(new Marker(*this,copyop)); }

		virtual bool isSameKindAs(const osg::Object* obj) const { return dynamic_cast<const Marker*>(obj)!=NULL; }

		virtual const char* libraryName() const { return "osgART"; }
		virtual const char* className() const { return "Marker"; }
		
		/** 
		* \brief default constructor.
		*
		*/
		Marker();

		/** 
		* Copy constructor. Needed for cloning in OSG
		*/
		Marker(const Marker& container,
			const osg::CopyOp& copyop = osg::CopyOp::SHALLOW_COPY);

		/** 
		* \brief assignemnt operator.
		*
		*/
		Marker& operator = (const Marker &);

		/**
		* Return the type of the Marker. 
		* \return Type of marker
		*/
		virtual MarkerType getType() const;
		
		/**
		* Determine if the marker is visible.
		* Return the validity of the marker, mainly valid with no occlusion,
		* no loss of tracking, in the FOV of the camera, correct recognition, etc.
		* \return the validity of the marker (true if valid).
		*/
		virtual bool valid() const;

		/**
		* Obtain the transformation of the marker.
		* Return return a 4x4 transformation of the marker.
		* \return a 4x4 transformation matrix matrix
		*/
		const osg::Matrix& getTransform() const;		
		
		/**
		* \brief Set the name of the marker
		* \param name identifying name for the marker
		*/
		void setName(const std::string& name);
		
		/** 
		* \brief retrieve name of the marker
		* \return marker name 
		*/
		const std::string& getName() const;

		/**
		* \brief Set the respective marker active 
		* \param active set to TRUE if the marker should be tracked
		*/
		virtual void setActive(bool active);	

		/**
		* \brief retrieve activity status from the marker
		* \return TRUE if the marker is active
		*/
		bool active() const;

		/**
		* \brief Return the tracking confidence of this marker.
		* \return Tracking confidence
		*/
		inline float getConfidence() const { return m_confidence; };

		
	protected: 
	
	
		/**
		* \brief destructor.
		*/
		virtual ~Marker(); 
		
	protected:

		/**
		 * \brief Internal update of the transformation matrix.
		 */
		void updateTransform(const osg::Matrix& transform);

		float m_confidence;
		bool m_valid;		
		bool m_active;
		osg::Matrix m_transform;
		std::string m_name;
	};


};

#endif
