/* -*-c++-*-
 *
 * osgART - AR for OpenSceneGraph
 * Copyright (C) 2005-2009 Human Interface Technology Laboratory New Zealand
 * Copyright (C) 2009-2013 osgART Development Team
 *
 * This file is part of osgART
 *
 * osgART 2.0 is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * osgART 2.0 is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with osgART 2.0.  If not, see <http://www.gnu.org/licenses/>.
 *
 */

/**
 *  \file  Calibration
 *  \brief Encapsulates camera calibration information about a video source.
 *
 * Encapsulates camera calibration information about a video source.
 */

#ifndef OSGART_CALIBRATION
#define OSGART_CALIBRATION 1

#include "osgART/Export"
#include "osgART/VideoGeode"

#include <osg/Camera>
#include <osg/Geometry>
#include <osg/Vec2b>


namespace osgART
{

	class OSGART_EXPORT Calibration : public osg::Referenced
	{
	public:


		/**
		 * Constructor for the Calibration
		 */
		Calibration();

		/**
		 * Set the size of the actual camera image in pixels
		 *
		 * \param width width of the camera image
		 * \param height height of the camera image
		 */
		virtual void setSize(int width, int height);


		/**
		 * Set the size of the actual camera image in pixels
		 *
		 * \param image image to be used by the calibration
		 */
		virtual void setSize(const osg::Image& image);


		/**
		 * Load a stored calibration from an external file (tracker dependent)
		 *
		 * \param filename resource to be loaded into the calibration
		 * \return true if the resource could be loaded successfully
		 */
		virtual bool load(const std::string& filename);

		/**
		 * Creates a camera with a projection matrix representing the
		 * loaded intrinsic parameters
		 *
		 * \return camera object
		 */
		osg::Camera* createCamera() const;


		/**
		 * Use the distortion parameters to compute undistorted positions for the
		 * specified x and y coordinates.
		 *
		 * \param x Input x coordinate
		 * \param y Input y coordinate
		 * \param u_x Output x coordinate
		 * \param u_y Output y coordinate
		 */
		inline virtual
		void undistort(double x, double y, double* u_x, double* u_y) {
			*u_x = x;
			*u_y = y;
		}


		static int observedToIdeal(
			const double dist_factor[4],
			const double ox,
			const double oy,
			double *ix, double *iy,
			int loop = 3);

		void setProjectionMatrix(osg::Matrix projection) {_projection=projection;};


	protected:

		virtual ~Calibration();

		osg::Matrix _intrinsics;
		osg::Vec4	_distortion;

		osg::Matrix _projection;

	};

}


#endif // OSGART_CALIBRATION
