/* -*-c++-*-
 *
 * osgART - AR for OpenSceneGraph
 * Copyright (C) 2005-2009 Human Interface Technology Laboratory New Zealand
 * Copyright (C) 2009-2013 osgART Development Team
 *
 * This file is part of osgART
 *
 * osgART 2.0 is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * osgART 2.0 is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with osgART 2.0.  If not, see <http://www.gnu.org/licenses/>.
 *
 */

/**
 *  \file  Target
 *  \brief Tracking objects.
 *
 *  Objects generated by a Tracker containing 3DOF to 6DOF Pose information.
 */


#ifndef OSGART_TARGET
#define OSGART_TARGET 1

#include <string>
#include <vector>

// local headers
#include "osgART/Export"
#include "osgART/Field"

// OSG headers
#include <osg/Matrix>
#include <osg/Vec3>
#include <osg/Object>
#include <osg/ImageStream>
#include <osg/CopyOp>


namespace osgART {


	class Tracker;

	/**
	* \class Target
	* \brief A base class from which specific types of target are derived.
	*/
	class OSGART_EXPORT Target : public osg::Object, public FieldContainer<Target>
	{
	public:

		enum TargetType
		{
			ART_UNKNOWN = 0,/**< Unknown or unspecified target type. */
			ART_SINGLE,		/**< A single target. */
			ART_MULTI,		/**< A multi-target. */
			ART_NFT,		/**< A natural feature tracking target. */
			ART_NFT_OPIRA,	/**< A natural feature tracking target for the OPIRA library. */
			ART_BAZAR		/**< A target for the Bazar library. */
		};

		/**
		* \brief default constructor.
		*
		*/
		Target();

		Target(const Target& target, const osg::CopyOp& copyop = osg::CopyOp::SHALLOW_COPY);

		META_Object(osgART,Target)


		/**
		* Return the type of the Target.
		* \return Type of target
		*/
		virtual TargetType getType() const;

		/**
		* Determine if the target is visible.
		* Return the validity of the target, mainly valid with no occlusion,
		* no loss of tracking, in the FOV of the camera, correct recognition, etc.
		* \return the validity of the target (true if valid).
		*/
		virtual bool valid() const;

		/**
		* Obtain the transformation of the target.
		* Return return a 4x4 transformation of the target.
		* \return a 4x4 transformation matrix
		*/
		const osg::Matrix& getTransform() const;

		/**
		* \brief Set the respective target active
		* \param active set to TRUE if the target should be tracked
		*/
		virtual void setActive(bool active);

		/**
		* \brief retrieve activity status from the target
		* \return TRUE if the target is active
		*/
		bool active() const;

		/**
		* \brief Return the tracking confidence of this target.
		* \return Tracking confidence
		*/
		inline float getConfidence() const { return _confidence; }

		/**
		 * override for usage in trackers
		 */
        virtual void update(Tracker& tracker) {}


	protected:


		/**
		* \brief destructor.
		*/
		virtual ~Target();

	protected:

		/**
		 * \brief Internal update of the transformation matrix.
		 */
		void updateTransform(const osg::Matrix& transform);

		float _confidence;
		bool _valid;
		bool _active;
		osg::Matrix _transform;
		std::string _name;
	};


};

#endif  // OSGART_TARGET
