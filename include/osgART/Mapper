/* -*-c++-*- 
 * 
 * osgART - Augmented Reality ToolKit for OpenSceneGraph
 * 
 * Copyright (C) 2005-2009 Human Interface Technology Laboratory New Zealand
 * Copyright (C) 2010-2013 Raphael Grasset, Julian Looser, Hartmut Seichter
 *
 * This library is open source and may be redistributed and/or modified under
 * the terms of the OpenSceneGraph Public License (OSGPL) version 0.0 or
 * (at your option) any later version.  The full license is in LICENSE file
 * included with this distribution, and on the osgart.org website.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * OpenSceneGraph Public License for more details.
*/

/**
 *  \file  Mapper
 *  \brief Base class for Mapper class
 *
 * A Mapper generate Mapper data
 */

#ifndef OSGART_MAPPER
#define OSGART_MAPPER 1

// std include
#include <map>
#include <iostream>

// OpenThreads include

// OSG include
#include <osg/Geometry>
#include <osg/Projection>
#include <osg/NodeVisitor>
#include <osg/Stats>

// local include
#include "osgART/Export"
#include "osgART/Object"
#include "osgART/Event"
#include "osgART/Field"

#include "osgART/MapData"
#include "osgART/MapperConfiguration"



namespace osgART {

	/**
     * \class Mapper.
	 *
     * Base class for a Mapper which in the context of AR is an entity
     * that connects Mapper data and their representation in
	 * the virtual environment.
	 */
    class OSGART_EXPORT Mapper : public osgART::Object,
                                 public FieldContainer<Mapper>
    {
	public:

        META_Object(osgART,Mapper)

		/** 
		 * Default constructor. Initializes also the FieldContainer 
		 * explicitly.
		 */
        Mapper();

		/** 
		 * Copy constructor. Needed for cloning in OSG
		 */
        Mapper(const Mapper& container, const osg::CopyOp& co = osg::CopyOp::SHALLOW_COPY);

		/** 
		 * \brief assignemnt operator.
		 *
		 */
        Mapper& operator = (const Mapper &);
		
		/**
		 * Needed for plugin loaded objects which are used in other
		 * languages which don't support dynamic casting (e.g. Python)
		 * \param instance instance to be casted
		 * \return 0 if can't cast otherwise correctly typed instance
		 */
        static Mapper* cast(osg::Referenced* instance);
		
		 /**
		 * Access a field by its name. You need to cast
		 * the field into its respective type in order
		 * to access it.
		 * \param name Name of the field
		 * \return pointer to the field (0L if not found)
		 */
		Field* get(const std::string& name);
				
		/**
         * Get the Mapper configuration struct
         * \return struct MapperConfiguration
		 */
        virtual MapperConfiguration* getOrCreateConfiguration();
		
		/**
         * Set the Mapper configuration struct
         * \param MapperConfiguration Mapper configuration
		*/
        virtual void setConfiguration(MapperConfiguration* config);
			
		/**
         * \brief retrieve specific Mapper.
         * \param Mapper data identification
         * get a Mapper data from the list of Mapper managed by the Mapper.
		 */
        virtual MapData* getMapData(size_t idx=0);

		inline size_t
        getMapDataNum() const { return _mapDataList.size(); }

	protected:

		/**
		 * \brief destructor.
		 */
        virtual ~Mapper();

		/**
		 * type for a vector of reference counted targets.
		 */
        typedef std::vector< osg::ref_ptr<MapData> > MapDataListType;

		/**
		 * A list of video stream associated with this video.
		 */
        MapDataListType _mapDataList;
	
		/**
		 * Video Configuration object that encapsulates the initialization parameters.
		 */
        osg::ref_ptr<MapperConfiguration> _mapperConfiguration;

    }; // class Mapper

} // namespace osgART

#endif // OSGART_MAPPER
