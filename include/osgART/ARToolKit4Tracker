/*  --------------------------------------------------------------------------
*   Copyright (C) 2004 Hitlab NZ.
*   The distribution policy is describe on the Copyright.txt furnish 
*    with this library.
*   -------------------------------------------------------------------------*/
/**
*  \file  ARToolKit4Tracker
*  \brief A wrapper class for artoolkit tracking system.
*
* 
* Support Marker-Based tracking based on computer vision based on ARToolKit
* Algorithm. This class provided video/graphic independent marker detection and
* support multiple marker tracking.
*	
*   \remark 
*
*   History :
*
*  \author Raphael Grasset Raphael.Grasset@hitlabnz.org
*  \version 3.1
*  \date 01/12/07
**/
/*  --------------------------------------------------------------------------
*   History : 
*   Rev		Date		Who		Changes
*
*----------------------------------------------------------------------------*/

#if defined ARToolKit4Tracker_CYCLE

#error Header cyclic inclusion detected in ARToolKit4Tracker.h
#else // defined ARToolKit4Tracker_CYCLE
#define ARToolKit4Tracker_CYCLE

#if !defined ARToolKit4Tracker_h
#define ARToolKit4Tracker_h

/* --------------------------------------------------------------------------
* include file
*----------------------------------------------------------------------------*/

//standard include

#include <iostream>
#include <fstream>
#include <vector>
#include <string>

//graphics include
#include <osgART/Export>

//personnal include
#include <AR4/AR/config.h>
//#include <AR4/AR/video.h>
#include <AR4/AR/param.h>			// arParamDisp()
#include <AR4/AR/ar.h>

#include <osgART/Marker>
#include <osgART/GenericTracker>

namespace osgART {

/** --------------------------------------------------------------------------
* class ARToolKit4Tracker.
*----------------------------------------------------------------------------*/


class OSGART_EXPORT ARToolKit4Tracker : public GenericTracker
{
public:        
// Standard Services
   
     /** 
    * \brief default constructor
    */
    ARToolKit4Tracker(void);
    /** 
    * \brief destructor.
    *
    */
    ~ARToolKit4Tracker();
    
// Interface
    
    // information interface
    void SelfDisplay(std::ostream& stream) const;

    bool OK(void) const;

    // mutator
    
    /** 
    * \brief get intrinsic parameters of the pinhole camera.
    * 
    * @return an artoolkit structure of intrinsics parameters 
    */
	ARParam getIntrinsicParameters();

	
    /** 
    * \brief set the openGL parameters for the projeciton matrix.
    * 
    * Initialize internal parameters computation for delivers an openGL Matrix (modify
    * nothing to openGL state machine). 
    * @param n near field of view
    * @param f far field of view
    */
	void setProjection(const double n, const double f);
	
     /** 
    * \brief set the threshhold value for the algorithm.
    * 
    * define the threshold use for the lighting condition in artoolkit.
    * @param thresh integer value between 0 (dark) and 100 (bright) 
    */
	void setThreshhold(int thresh);
	
	// services
	
	 /** 
    * \brief initialize ARToolKit.
    * 
    * This core function initialize different parameters of ARToolKit: load tracked markers, initialize
    * camera parameters.
    * @param xsize width of the image to analyze
    * @param ysize height of the image to analyze
    * @param pattlist_name a file structure of the marker
    * @param camera_name description file of the camera used (pinhole model)
     */
	void init(int xsize,int ysize,char* pattlist_name="Data/markers_list.dat",char*camera_name="Data/camera_para.dat");
	
	/** 
    * \brief XXX.
    * 
    * XXX.
    */
	int addSingleMarker(std::string pattFile, double width, double centerX, double centerY);
	
	/** 
    * \brief XXX.
    * 
    * XXX.
    */
	int addMultiMarker(std::string multiFile);

	
	/** 
    * \brief update the tracking.
    * 
    * This core function apply the ARToolKit algorithm on the last image defined by setImage.
    */
	void update();
	
    /** 
    * \brief get the position of a marker.
    * 
    * Get the state of a marker since the last call of Update. User can access the 
    * actual visibility of the marker, and if yes, the actual transformation.
    *
    * @param markerId integer defining the marker to get position
    * @param visible boolean of the state of the marker: detected in last picture
    * @param trans an euclidian matrix of the transformation.
    * \rem trans is undefined if visible=false
    */
	//void getTransform(int markerId,bool& visible, double trans[3][4]);
	
	/** 
    * \brief conversion function.
    * 
    * utility function to transform matrix from ARToolKit representation to GL representation.
    * @param para the input ARToolKit Matrix
    * @param gl the computed GL Matrix
    */
	void ARTransToGL(double para[3][4], double gl[16]);
	
// Public Type
    
// Public Datas
    
    
protected: 
    
//Protected Services

//Protected Type

//Protected Data
	
private:

//Private Services
	void SetupMarkers();
//Private Type

//Private Data
  std::string cparamName;
  std::string pattListName;

  int threshhold;// = 100;
  ARParam  cparam;

  ARHandle           *arHandle;
  ARPattHandle       *arPattHandle;
  AR3DHandle         *ar3DHandle;
  
};

/* --------------------------------------------------------------------------
* inline fonction
*----------------------------------------------------------------------------*/

inline std::ostream& operator <<(std::ostream& stream, const ARToolKit4Tracker& object_display);

std::ostream& operator <<(std::ostream& stream, const ARToolKit4Tracker& object_display)
{
    object_display.SelfDisplay(stream);
    return stream;
}
}
/*----------------------------------------------------------------------------*/

#endif // !defined ARToolKit4Tracker_h

#undef ARToolKit4Tracker_CYCLE
#endif // else defined ARToolKit4Tracker_CYCLE


