/* -*-c++-*- 
 * 
 * osgART - Augmented Reality ToolKit for OpenSceneGraph
 * 
 * Copyright (C) 2005-2009 Human Interface Technology Laboratory New Zealand
 * Copyright (C) 2010-2014 Raphael Grasset, Julian Looser, Hartmut Seichter
 *
 * This library is open source and may be redistributed and/or modified under
 * the terms of the OpenSceneGraph Public License (OSGPL) version 0.0 or
 * (at your option) any later version.  The full license is in LICENSE file
 * included with this distribution, and on the osgart.org website.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * OpenSceneGraph Public License for more details.
*/

/**
 *  \file  VideoGeode
 *  \brief Geometry wrapper being used to render a video onto
 *  \author Hartmut Seichter hartmut.seichter@hitlabnz.org
 *  \version 1.0
 *  \date 08/08/2007
 * 
 * Geometry wrapper being used to render a video onto
 **/

#ifndef OSGART_VIDEOGEODE
#define OSGART_VIDEOGEODE 1

// std include
#include <deque>

// OpenThreads include

// OSG include
#include <osg/Drawable>
#include <osg/Geode>
#include <osg/Image>

// local include
#include "osgART/Export"



namespace osgART {

	class OSGART_EXPORT VideoGeode : public osg::Geode
	{
	public:
	
		/** 
	     * Modes how the video is being rendered.
	     */
		enum TextureMode 
		{			
			USE_TEXTURE_2D,				/**< Video is being pasted into a 2D texture */
			USE_TEXTURE_RECTANGLE,		/**< Video is being attached to a 2D rectangle */
		};

		/** Constructor */		
		VideoGeode(
                osg::Image* image=0L,					// Image to texture
                TextureMode textureMode =USE_TEXTURE_2D			// Mode to texture with
        );

        /** Copy constructor using CopyOp to manage deep vs shallow copy.*/
        VideoGeode(const VideoGeode&, const osg::CopyOp& copyop = osg::CopyOp::SHALLOW_COPY);

        META_Node(osgART, VideoGeode);
		 

	protected:	

		virtual ~VideoGeode();		
		
		TextureMode _textureMode;
        osg::Image* _image;
	};
}

#endif // OSGART_VIDEOGEODE
