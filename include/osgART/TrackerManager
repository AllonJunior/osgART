/*
 *	osgART/TrackerManager
 *	osgART: AR ToolKit for OpenSceneGraph
 *
 *	Copyright (c) 2005-2007 ARToolworks, Inc. All rights reserved.
 *	
 *	Rev		Date		Who		Changes
 *  1.0   	2006-12-08  ---     Version 1.0 release.
 *
 */
// @@OSGART_LICENSE_HEADER_BEGIN@@
// @@OSGART_LICENSE_HEADER_END@@

#ifndef OSGART_TRACKERMANAGER
#define OSGART_TRACKERMANAGER 1

// STL include
#include <map>

// local include
#include "osgART/Export"
#include "osgART/GenericTracker"

namespace osgART {

/**
 * class TrackerManager.
 *
 */
class OSGART_EXPORT TrackerManager
{
	public:        
    
		/** 
		* \brief singleton constructor.
		* Based on a singleton pattern, user can get the instance of the tracker manager
		* actually used by the program.
		* \return an instance of a tracker manager
		*/
		static TrackerManager* getInstance();
	    
		/**
		* \brief destructor.
		*/
		~TrackerManager();    

		/**
		* \brief register a tracker.
		* Register in the tracker manager a tracker.
		* \param tracker the tracker to register
		* \return the id of the tracker
		*/
		int addTracker(GenericTracker* tracker);
		
		
		/**
		 * \brief unregister a tracker.
		 * Unregister a tracker from the tracker manager.
		 * \param tracker the tracker to unregister
		 */
		void removeTracker(GenericTracker* tracker);

		
		/**
		* \brief obtain a tracker.
		* Return instance of a tracker identified by his id.
		* \return an instance of a tracker
		*/
		GenericTracker* getTracker(int idTracker);
		
		
		/**
		 * Explicitly delete the instance of the Tracker.
		 * This method will also destroy all attached 
		 * Tracker and free their memory if they are not
		 * referenced any more.
		 */
		static void destroy();
		
		
		/**
		 * Creates and registers a tracker from an external plugin.
		 * \param plugin name of the plugin (excluding the system specific extension)
		 * \param trackerconfig configuration parameters for the tracker
		 * \return pointer to the instance of the tracker
		 */
		static
		GenericTracker* createTrackerFromPlugin(const std::string& plugin);
			
		/** function signature for creating a tracker instance */
		typedef GenericTracker* (*p_TrackerCreateFunc)(void);
	    
	protected:
		    
		TrackerManager();
		
		typedef std::map<int, osg::ref_ptr<GenericTracker> > TrackerMap;
				
		int m_trackercount;
		
		TrackerMap m_trackermap;
		
	private:
	
		static TrackerManager* s_instance;
	};

};

#endif
