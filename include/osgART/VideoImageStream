/*
 *	osgART/VideoImageStream
 *	osgART: AR ToolKit for OpenSceneGraph
 *
 *	Copyright (c) 2005-2007 ARToolworks, Inc. All rights reserved.
 *	
 *	Rev		Date		Who		Changes
 *  1.0   	2006-12-08  ---     Version 1.0 release.
 *
 */
// @@OSGART_LICENSE_HEADER_BEGIN@@
// @@OSGART_LICENSE_HEADER_END@@

#ifndef OSGART_VIDEOIMAGESTREAM
#define OSGART_VIDEOIMAGESTREAM 1

// OSG include
#include <osg/ImageStream>


// Local include
#include "osgART/Export"

namespace osgART {


	class OSGART_EXPORT VideoImageStream : public osg::ImageStream
	{	
	public:
	
		/** Constructor */
		VideoImageStream();
		
        /** Copy constructor using CopyOp to manage deep vs shallow copy. */
        VideoImageStream(const VideoImageStream& image, 
			const osg::CopyOp& copyop=osg::CopyOp::SHALLOW_COPY);

        virtual osg::Object* cloneType() const 
        { 
			return new VideoImageStream(); 
		}
        
        virtual osg::Object* clone(const osg::CopyOp& copyop) const 
        { 
			return new VideoImageStream(*this,copyop); 
		}
			
        virtual bool isSameKindAs(const osg::Object* obj) const 
        {
			return dynamic_cast<const VideoImageStream*>(obj) != 0; 
		}
        
        virtual const char* libraryName() const 
        {
			return "osgART"; 
		}
        
        virtual const char* className() const 
        {
			return "VideoImageStream";
		}			
		
		
		/**
		 * \brief start the  video stream grabbing.
		 * Start to get image from the  video stream. In function of the implementation on different
		 * platform, this function can run a thread, signal or real-time function. 
		 */
		virtual void start();
		
		/**
		 * \brief stop the  video stream grabbing.
		 * Stop to get image from the  video stream. In function of 
		 * the implementation on different platform, this function can 
		 * stop a thread, signal or real-time function. 
		 */
		virtual void stop();
		
		/**
		 * \brief open the GenericVideo stream.
		 * Access the GenericVideo stream (hardware or file) and get an handle on it.
		 */		
		virtual void open();
				
		/**
		 * \brief close the video stream.
		 * Terminate the connection with the video stream and 
		 * clean handle.
		 */	
		virtual void close(bool waitForThread = true);
		
	};
	

}

#endif
